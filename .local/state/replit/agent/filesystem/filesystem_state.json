{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AgriConnect Rwanda\n\n## Overview\n\nAgriConnect Rwanda is a full-stack web application designed to connect farmers with customers in Rwanda's agricultural market. The platform provides a marketplace for agricultural products with location-based farmer discovery, price comparison, and machine learning-powered recommendations. The application supports English and Kinyarwanda languages and is tailored specifically for Rwanda's geographical structure (provinces, districts, sectors).\n\nThe system serves three user types: farmers who can list and manage their products, customers who can browse and purchase products, and administrators who oversee the platform operations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom color scheme featuring Rwanda's national colors\n- **Routing**: Wouter for client-side routing\n- **State Management**: React Query (TanStack Query) for server state management\n- **Forms**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Session Management**: Express sessions with PostgreSQL store\n- **Authentication**: Replit OAuth integration with Passport.js\n- **API Design**: RESTful API with structured error handling and request logging\n\n### Database Design\n- **Primary Database**: PostgreSQL with comprehensive schema for Rwanda's agricultural marketplace\n- **Core Entities**: Users, farmers, products, orders, reviews, and Rwanda's administrative divisions\n- **Location Structure**: Hierarchical location data (provinces → districts → sectors) matching Rwanda's administrative structure\n- **Session Storage**: Dedicated sessions table for authentication persistence\n\n### Authentication & Authorization\n- **Provider**: Replit OAuth with OpenID Connect\n- **Session Management**: Server-side sessions with PostgreSQL storage\n- **Role-based Access**: Three user types (customer, farmer, admin) with different dashboard access\n- **Security**: Secure session cookies, CSRF protection, and proper error handling\n\n### Machine Learning Integration\n- **Demand Predictions**: ML models for forecasting product demand\n- **Recommendation System**: Personalized product and farmer recommendations\n- **Price Analysis**: Intelligent price comparison and market insights\n\n## External Dependencies\n\n### Core Development Stack\n- **Database**: PostgreSQL via Neon Database (@neondatabase/serverless)\n- **ORM**: Drizzle ORM with PostgreSQL adapter\n- **Authentication**: Replit OAuth infrastructure\n- **Frontend Framework**: React 18 with TypeScript\n- **Build Tools**: Vite with TypeScript support\n\n### UI and Styling\n- **Component Library**: Shadcn/ui with Radix UI primitives\n- **Styling**: Tailwind CSS with PostCSS\n- **Icons**: Lucide React icon library\n- **Fonts**: Google Fonts integration (Inter, DM Sans, Geist Mono, etc.)\n\n### Data Management\n- **HTTP Client**: Native fetch API with React Query\n- **Form Handling**: React Hook Form with Zod schema validation\n- **Date Utilities**: date-fns for date manipulation\n- **State Management**: TanStack React Query for server state\n\n### Development Tools\n- **Type Checking**: TypeScript with strict configuration\n- **Session Storage**: connect-pg-simple for PostgreSQL session store\n- **Development Server**: Vite dev server with HMR\n- **Build Process**: ESBuild for production builds\n\n### Rwanda-Specific Features\n- **Geographical Data**: Complete Rwanda administrative divisions (provinces, districts, sectors)\n- **Localization**: Kinyarwanda language support alongside English\n- **Agricultural Categories**: Rwanda-specific crop and livestock categories\n- **Local Currency**: Rwandan Franc (RWF) price formatting","size_bytes":4008},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        'rwanda-green': \"var(--rwanda-green)\",\n        'rwanda-teal': \"var(--rwanda-teal)\",\n        'rwanda-amber': \"var(--rwanda-amber)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: ['Inter', 'sans-serif'],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2945},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport MemoryStore from \"memorystore\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  \n  // Use memory store for development\n  const SessionMemoryStore = MemoryStore(session);\n  const sessionStore = new SessionMemoryStore({\n    checkPeriod: 86400000 // prune expired entries every 24h\n  });\n\n  return session({\n    secret: process.env.SESSION_SECRET || 'dev-secret-key-change-in-production',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4338},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertFarmerSchema, insertProductSchema, insertOrderSchema, insertReviewSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcrypt\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Email/Password Authentication Routes\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const { firstName, lastName, email, password, userType } = req.body;\n      \n      // Check if user already exists\n      const existingUsers = await storage.searchUsers({ email });\n      if (existingUsers.length > 0) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n      \n      // Create user\n      const user = await storage.upsertUser({\n        id: `user_${Date.now()}`,\n        email,\n        firstName,\n        lastName,\n        userType: userType || 'customer',\n        password: hashedPassword,\n      });\n\n      res.json({ message: \"User created successfully\", userId: user.id });\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password, userType } = req.body;\n      \n      // Find user by email\n      const users = await storage.searchUsers({ email });\n      const user = users.find(u => u.userType === userType);\n      \n      if (!user || !user.password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Verify password\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Create session\n      (req.session as any).user = {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        userType: user.userType,\n      };\n\n      res.json({ message: \"Login successful\", user: { ...user, password: undefined } });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Failed to login\" });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.json({ message: \"Logout successful\" });\n    });\n  });\n\n  // Check authentication middleware\n  const isEmailAuthenticated = (req: any, res: any, next: any) => {\n    if (req.user?.claims?.sub || req.session?.user) {\n      req.currentUser = req.user?.claims ? { \n        id: req.user.claims.sub,\n        email: req.user.claims.email,\n        firstName: req.user.claims.first_name,\n        lastName: req.user.claims.last_name,\n      } : req.session.user;\n      return next();\n    }\n    return res.status(401).json({ message: \"Unauthorized\" });\n  };\n\n  // Auth routes\n  app.get('/api/auth/user', isEmailAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.currentUser.id;\n      const user = await storage.getUser(userId);\n      if (user) {\n        res.json({ ...user, password: undefined });\n      } else {\n        res.status(404).json({ message: \"User not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Location routes\n  app.get('/api/locations/provinces', async (req, res) => {\n    try {\n      const provinces = await storage.getProvinces();\n      res.json(provinces);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch provinces\" });\n    }\n  });\n\n  app.get('/api/locations/districts/:provinceId', async (req, res) => {\n    try {\n      const districts = await storage.getDistrictsByProvince(req.params.provinceId);\n      res.json(districts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch districts\" });\n    }\n  });\n\n  app.get('/api/locations/sectors/:districtId', async (req, res) => {\n    try {\n      const sectors = await storage.getSectorsByDistrict(req.params.districtId);\n      res.json(sectors);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sectors\" });\n    }\n  });\n\n  // Farmer routes\n  app.post('/api/farmers', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const farmerData = insertFarmerSchema.parse({ ...req.body, userId });\n      const farmer = await storage.createFarmer(farmerData);\n      \n      // Update user type to farmer\n      await storage.upsertUser({ id: userId, userType: \"farmer\" });\n      \n      res.json(farmer);\n    } catch (error) {\n      console.error(\"Error creating farmer:\", error);\n      res.status(400).json({ message: \"Failed to create farmer profile\" });\n    }\n  });\n\n  app.get('/api/farmers/me', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const farmer = await storage.getFarmerByUserId(userId);\n      if (!farmer) {\n        return res.status(404).json({ message: \"Farmer profile not found\" });\n      }\n      res.json(farmer);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch farmer profile\" });\n    }\n  });\n\n  app.get('/api/farmers/search', async (req, res) => {\n    try {\n      const filters = {\n        provinceId: req.query.provinceId as string,\n        districtId: req.query.districtId as string,\n        sectorId: req.query.sectorId as string,\n        productCategory: req.query.productCategory as string,\n        maxDistance: req.query.maxDistance ? parseFloat(req.query.maxDistance as string) : undefined,\n        userLat: req.query.userLat ? parseFloat(req.query.userLat as string) : undefined,\n        userLng: req.query.userLng ? parseFloat(req.query.userLng as string) : undefined,\n      };\n      \n      const farmers = await storage.searchFarmers(filters);\n      res.json(farmers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search farmers\" });\n    }\n  });\n\n  // Product routes\n  app.post('/api/products', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const farmer = await storage.getFarmerByUserId(userId);\n      if (!farmer) {\n        return res.status(403).json({ message: \"Only farmers can create products\" });\n      }\n\n      const productData = insertProductSchema.parse({ ...req.body, farmerId: farmer.id });\n      const product = await storage.createProduct(productData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(400).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.get('/api/products/categories', async (req, res) => {\n    try {\n      const categories = await storage.getProductCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product categories\" });\n    }\n  });\n\n  app.get('/api/products/search', async (req, res) => {\n    try {\n      const filters = {\n        categoryId: req.query.categoryId as string,\n        provinceId: req.query.provinceId as string,\n        districtId: req.query.districtId as string,\n        minPrice: req.query.minPrice ? parseFloat(req.query.minPrice as string) : undefined,\n        maxPrice: req.query.maxPrice ? parseFloat(req.query.maxPrice as string) : undefined,\n      };\n      \n      const products = await storage.searchProducts(filters);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search products\" });\n    }\n  });\n\n  app.get('/api/products/farmer/:farmerId', async (req, res) => {\n    try {\n      const products = await storage.getProductsByFarmer(req.params.farmerId);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch farmer products\" });\n    }\n  });\n\n  // Price comparison route with AI-powered analysis\n  app.get('/api/products/price-comparison/:categoryId', async (req, res) => {\n    try {\n      const { categoryId } = req.params;\n      const provinceId = req.query.provinceId as string;\n      \n      const comparison = await storage.getProductPriceComparison(categoryId, provinceId);\n      \n      // AI-powered analysis using simple algorithms\n      const avgPrice = comparison.reduce((sum, item) => sum + parseFloat(item.product.pricePerUnit), 0) / comparison.length;\n      const bestValue = comparison[0]; // Already sorted by price\n      \n      // Calculate similarity scores (mock TF-IDF + Cosine similarity)\n      const analysisResult = comparison.map((item, index) => {\n        const price = parseFloat(item.product.pricePerUnit);\n        const priceVariance = ((price - avgPrice) / avgPrice) * 100;\n        const qualityScore = parseFloat(item.farmer.rating || \"0\");\n        const distanceScore = item.distance ? (10 - item.distance) / 10 : 1;\n        \n        // Mock similarity score calculation\n        const similarityScore = (qualityScore * 0.4 + distanceScore * 0.3 + (price <= avgPrice ? 0.3 : 0.1)).toFixed(4);\n        \n        return {\n          ...item,\n          priceVariance: priceVariance.toFixed(1),\n          similarityScore,\n          recommendation: index === 0 ? \"best_value\" : priceVariance < -5 ? \"good_deal\" : \"premium\"\n        };\n      });\n\n      res.json({\n        products: analysisResult,\n        analysis: {\n          averagePrice: avgPrice.toFixed(0),\n          bestValue: bestValue.farmer.user.firstName + \" \" + bestValue.farmer.user.lastName,\n          totalOptions: comparison.length,\n          aiRecommendation: `${bestValue.farmer.user.firstName} is recommended based on price optimization and quality ratings.`\n        }\n      });\n    } catch (error) {\n      console.error(\"Error in price comparison:\", error);\n      res.status(500).json({ message: \"Failed to perform price comparison\" });\n    }\n  });\n\n  // Order routes\n  app.post('/api/orders', isAuthenticated, async (req: any, res) => {\n    try {\n      const customerId = req.user.claims.sub;\n      const { items, ...orderData } = req.body;\n      \n      const orderSchema = insertOrderSchema.extend({\n        items: z.array(z.object({\n          productId: z.string(),\n          quantity: z.number(),\n          unitPrice: z.number(),\n        }))\n      });\n      \n      const validatedData = orderSchema.parse({ ...orderData, customerId, items });\n      const order = await storage.createOrder(validatedData, validatedData.items);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(400).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  app.get('/api/orders/customer', isAuthenticated, async (req: any, res) => {\n    try {\n      const customerId = req.user.claims.sub;\n      const orders = await storage.getOrdersByCustomer(customerId);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch customer orders\" });\n    }\n  });\n\n  app.get('/api/orders/farmer', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const farmer = await storage.getFarmerByUserId(userId);\n      if (!farmer) {\n        return res.status(403).json({ message: \"Only farmers can view farmer orders\" });\n      }\n      \n      const orders = await storage.getOrdersByFarmer(farmer.id);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch farmer orders\" });\n    }\n  });\n\n  app.patch('/api/orders/:orderId/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const { orderId } = req.params;\n      const { status } = req.body;\n      \n      await storage.updateOrderStatus(orderId, status);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update order status\" });\n    }\n  });\n\n  // Review routes\n  app.post('/api/reviews', isAuthenticated, async (req: any, res) => {\n    try {\n      const customerId = req.user.claims.sub;\n      const { rating, farmerId, orderId, comment } = req.body;\n      const reviewData = {\n        rating,\n        farmerId,\n        customerId,\n        orderId: orderId || null,\n        comment: comment || null,\n      };\n      const review = await storage.createReview(reviewData);\n      res.json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      res.status(400).json({ message: \"Failed to create review\" });\n    }\n  });\n\n  app.get('/api/reviews/farmer/:farmerId', async (req, res) => {\n    try {\n      const reviews = await storage.getReviewsByFarmer(req.params.farmerId);\n      res.json(reviews);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch farmer reviews\" });\n    }\n  });\n\n  // ML/AI routes\n  app.get('/api/ml/demand-predictions', async (req, res) => {\n    try {\n      const categoryId = req.query.categoryId as string;\n      const provinceId = req.query.provinceId as string;\n      \n      const predictions = await storage.getDemandPredictions(categoryId, provinceId);\n      \n      // Generate mock predictions if none exist\n      if (predictions.length === 0) {\n        const mockPrediction = {\n          productCategoryId: categoryId,\n          provinceId: provinceId,\n          predictedDemand: (Math.random() * 50000 + 30000).toFixed(0),\n          confidenceScore: (0.85 + Math.random() * 0.1).toFixed(4),\n          predictionDate: new Date(),\n        };\n        \n        const saved = await storage.saveDemandPrediction(mockPrediction);\n        res.json([saved]);\n      } else {\n        res.json(predictions);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch demand predictions\" });\n    }\n  });\n\n  app.get('/api/ml/recommendations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const recommendations = await storage.getRecommendationsForUser(userId);\n      \n      // Generate mock recommendations if none exist\n      if (recommendations.length === 0) {\n        // Simple recommendation algorithm based on user activity\n        const allProducts = await storage.searchProducts({});\n        const mockRecommendations = allProducts.slice(0, 3).map(product => ({\n          userId,\n          productId: product.id,\n          similarityScore: (0.7 + Math.random() * 0.3).toFixed(4),\n          recommendationType: \"location\",\n        }));\n        \n        for (const rec of mockRecommendations) {\n          await storage.saveRecommendation(rec);\n        }\n        \n        const newRecommendations = await storage.getRecommendationsForUser(userId);\n        res.json(newRecommendations);\n      } else {\n        res.json(recommendations);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch recommendations\" });\n    }\n  });\n\n  // Admin dashboard routes\n  app.get('/api/admin/statistics', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.userType !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Mock statistics - in real app would calculate from actual data\n      const stats = {\n        totalFarmers: 1247,\n        totalCustomers: 5691,\n        totalOrders: 892,\n        totalRevenue: \"234500000\", // RWF\n        avgOrderValue: \"28500\", // RWF\n        mlModelAccuracy: \"94.2\",\n        recommendationCTR: \"87.5\",\n        modelConfidence: \"91.8\",\n        topProvinces: [\n          { name: \"Kigali City\", farmers: 423, orders: 298 },\n          { name: \"Southern Province\", farmers: 312, orders: 234 },\n          { name: \"Northern Province\", farmers: 267, orders: 189 },\n        ],\n        recentActivity: [\n          { type: \"order\", description: \"New order from Marie in Gasabo\", timestamp: new Date() },\n          { type: \"farmer\", description: \"Jean Baptiste updated prices\", timestamp: new Date() },\n          { type: \"prediction\", description: \"AI predicted high egg demand\", timestamp: new Date() },\n        ]\n      };\n\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch admin statistics\" });\n    }\n  });\n\n  // Admin API endpoints\n  app.get('/api/admin/statistics', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (user?.userType !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Mock statistics - replace with real data from storage\n      const stats = {\n        totalUsers: 150,\n        totalFarmers: 45,\n        totalOrders: 320,\n        totalRevenue: 15750000,\n        pendingOrders: 12,\n        completedOrders: 280\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin statistics:\", error);\n      res.status(500).json({ message: \"Failed to fetch statistics\" });\n    }\n  });\n\n  app.get('/api/admin/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (user?.userType !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const users = await storage.searchUsers({});\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get('/api/admin/farmers', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (user?.userType !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const farmers = await storage.searchFarmers({});\n      res.json(farmers);\n    } catch (error) {\n      console.error(\"Error fetching farmers:\", error);\n      res.status(500).json({ message: \"Failed to fetch farmers\" });\n    }\n  });\n\n  app.get('/api/admin/orders', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (user?.userType !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const orders = await storage.getAllOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching admin orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get('/api/admin/products', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (user?.userType !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const products = await storage.getAllProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching admin products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":19647},"server/storage.ts":{"content":"import {\n  users,\n  farmers,\n  products,\n  orders,\n  orderItems,\n  reviews,\n  provinces,\n  districts,\n  sectors,\n  productCategories,\n  demandPredictions,\n  recommendations,\n  type User,\n  type UpsertUser,\n  type Farmer,\n  type InsertFarmer,\n  type Product,\n  type InsertProduct,\n  type Order,\n  type InsertOrder,\n  type Province,\n  type District,\n  type Sector,\n  type ProductCategory,\n  type Review,\n  type DemandPrediction,\n  type Recommendation,\n} from \"@shared/schema\";\nimport { eq, and, sql, desc, asc, like, or } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations - mandatory for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  searchUsers(filters: { email?: string; userType?: string }): Promise<User[]>;\n  \n  // Location operations\n  getProvinces(): Promise<Province[]>;\n  getDistrictsByProvince(provinceId: string): Promise<District[]>;\n  getSectorsByDistrict(districtId: string): Promise<Sector[]>;\n  \n  // Farmer operations\n  createFarmer(farmer: InsertFarmer): Promise<Farmer>;\n  getFarmerById(id: string): Promise<Farmer | undefined>;\n  getFarmerByUserId(userId: string): Promise<Farmer | undefined>;\n  searchFarmers(filters: {\n    provinceId?: string;\n    districtId?: string;\n    sectorId?: string;\n    productCategory?: string;\n    maxDistance?: number;\n    userLat?: number;\n    userLng?: number;\n  }): Promise<(Farmer & { user: User })[]>;\n  updateFarmerRating(farmerId: string, newRating: number): Promise<void>;\n  \n  // Product operations\n  createProduct(product: InsertProduct): Promise<Product>;\n  getProductsByFarmer(farmerId: string): Promise<Product[]>;\n  getProductCategories(): Promise<ProductCategory[]>;\n  searchProducts(filters: {\n    categoryId?: string;\n    provinceId?: string;\n    districtId?: string;\n    minPrice?: number;\n    maxPrice?: number;\n  }): Promise<(Product & { farmer: Farmer & { user: User } })[]>;\n  \n  // Order operations\n  createOrder(order: InsertOrder, items: Array<{ productId: string; quantity: number; unitPrice: number }>): Promise<Order>;\n  getOrdersByCustomer(customerId: string): Promise<(Order & { farmer: Farmer & { user: User } })[]>;\n  getOrdersByFarmer(farmerId: string): Promise<(Order & { customer: User })[]>;\n  updateOrderStatus(orderId: string, status: string): Promise<void>;\n  \n  // Review operations\n  createReview(review: Omit<Review, 'id' | 'createdAt'>): Promise<Review>;\n  getReviewsByFarmer(farmerId: string): Promise<(Review & { customer: User })[]>;\n  \n  // ML/AI operations\n  saveDemandPrediction(prediction: Omit<DemandPrediction, 'id' | 'createdAt'>): Promise<DemandPrediction>;\n  getDemandPredictions(categoryId?: string, provinceId?: string): Promise<DemandPrediction[]>;\n  saveRecommendation(recommendation: Omit<Recommendation, 'id' | 'createdAt'>): Promise<Recommendation>;\n  getRecommendationsForUser(userId: string): Promise<(Recommendation & { product: Product & { farmer: Farmer } })[]>;\n  \n  // Price comparison\n  getProductPriceComparison(categoryId: string, provinceId?: string): Promise<Array<{\n    product: Product;\n    farmer: Farmer & { user: User };\n    distance?: number;\n  }>>;\n\n  // Admin operations\n  searchUsers(filters: Record<string, any>): Promise<User[]>;\n  getAllOrders(): Promise<(Order & { customer: User; farmer: Farmer & { user: User } })[]>;\n  getAllProducts(): Promise<(Product & { farmer: Farmer & { user: User } })[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private farmers: Map<string, Farmer> = new Map();\n  private products: Map<string, Product> = new Map();\n  private orders: Map<string, Order> = new Map();\n  private orderItems: Map<string, any> = new Map();\n  private reviews: Map<string, Review> = new Map();\n  private demandPredictions: Map<string, DemandPrediction> = new Map();\n  private recommendations: Map<string, Recommendation> = new Map();\n  \n  // Rwanda location data\n  private provinces: Province[] = [\n    { id: \"kigali\", name: \"Kigali City\", nameKinyarwanda: \"Umujyi wa Kigali\" },\n    { id: \"northern\", name: \"Northern Province\", nameKinyarwanda: \"Intara y'Amajyaruguru\" },\n    { id: \"southern\", name: \"Southern Province\", nameKinyarwanda: \"Intara y'Amajyepfo\" },\n    { id: \"eastern\", name: \"Eastern Province\", nameKinyarwanda: \"Intara y'Iburasirazuba\" },\n    { id: \"western\", name: \"Western Province\", nameKinyarwanda: \"Intara y'Iburengerazuba\" },\n  ];\n  \n  private districts: District[] = [\n    { id: \"gasabo\", name: \"Gasabo\", nameKinyarwanda: \"Gasabo\", provinceId: \"kigali\" },\n    { id: \"kicukiro\", name: \"Kicukiro\", nameKinyarwanda: \"Kicukiro\", provinceId: \"kigali\" },\n    { id: \"nyarugenge\", name: \"Nyarugenge\", nameKinyarwanda: \"Nyarugenge\", provinceId: \"kigali\" },\n  ];\n  \n  private sectors: Sector[] = [\n    { id: \"remera\", name: \"Remera\", nameKinyarwanda: \"Remera\", districtId: \"gasabo\" },\n    { id: \"kacyiru\", name: \"Kacyiru\", nameKinyarwanda: \"Kacyiru\", districtId: \"gasabo\" },\n    { id: \"niboye\", name: \"Niboye\", nameKinyarwanda: \"Niboye\", districtId: \"kicukiro\" },\n  ];\n  \n  private productCategories: ProductCategory[] = [\n    { id: \"poultry\", name: \"Poultry\", nameKinyarwanda: \"Inkoko\", description: \"Chickens and poultry products\" },\n    { id: \"eggs\", name: \"Eggs\", nameKinyarwanda: \"Amagi\", description: \"Fresh eggs\" },\n    { id: \"manure\", name: \"Manure\", nameKinyarwanda: \"Ifumbire\", description: \"Organic fertilizer\" },\n  ];\n\n  constructor() {\n    // Initialize with some sample data\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample users\n    const sampleUsers = [\n      {\n        id: \"farmer1\",\n        email: \"jean.baptiste@example.com\",\n        firstName: \"Jean\",\n        lastName: \"Baptiste\",\n        userType: \"farmer\",\n        profileImageUrl: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n        password: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"farmer2\", \n        email: \"marie.claire@example.com\",\n        firstName: \"Marie\",\n        lastName: \"Claire\",\n        userType: \"farmer\",\n        profileImageUrl: \"https://images.unsplash.com/photo-1494790108755-2616b612b5bc?w=150\",\n        password: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ];\n\n    sampleUsers.forEach(user => this.users.set(user.id, user as User));\n\n    // Sample farmers\n    const sampleFarmers = [\n      {\n        id: \"farm1\",\n        userId: \"farmer1\",\n        farmName: \"Baptiste Poultry Farm\",\n        description: \"Quality chicken and eggs from Gasabo\",\n        provinceId: \"kigali\",\n        districtId: \"gasabo\",\n        sectorId: \"remera\",\n        latitude: \"-1.9441\",\n        longitude: \"30.0619\",\n        phone: \"+250788123456\",\n        rating: \"4.8\",\n        totalRatings: 24,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"farm2\",\n        userId: \"farmer2\", \n        farmName: \"Claire's Organic Farm\",\n        description: \"Fresh organic eggs and poultry\",\n        provinceId: \"kigali\",\n        districtId: \"kicukiro\",\n        sectorId: \"niboye\",\n        latitude: \"-1.9675\",\n        longitude: \"30.1034\",\n        phone: \"+250788654321\",\n        rating: \"4.6\",\n        totalRatings: 18,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ];\n\n    sampleFarmers.forEach(farmer => this.farmers.set(farmer.id, farmer as Farmer));\n\n    // Sample products\n    const sampleProducts = [\n      {\n        id: \"prod1\",\n        farmerId: \"farm1\",\n        categoryId: \"poultry\",\n        name: \"Fresh Chicken\",\n        nameKinyarwanda: \"Inkoko Nshya\",\n        description: \"Free-range chicken\",\n        unit: \"kg\",\n        pricePerUnit: \"4500\",\n        availableQuantity: 20,\n        minOrderQuantity: 1,\n        isAvailable: true,\n        imageUrl: \"https://images.unsplash.com/photo-1548550023-2bdb3c5beed7?w=400\",\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"prod2\",\n        farmerId: \"farm1\",\n        categoryId: \"eggs\",\n        name: \"Fresh Eggs (30 count)\",\n        nameKinyarwanda: \"Amagi Mashya (30)\",\n        description: \"Farm fresh eggs\",\n        unit: \"tray\",\n        pricePerUnit: \"3000\",\n        availableQuantity: 15,\n        minOrderQuantity: 1,\n        isAvailable: true,\n        imageUrl: \"https://images.unsplash.com/photo-1586953208448-b95a79798f07?w=400\",\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ];\n\n    sampleProducts.forEach(product => this.products.set(product.id, product as Product));\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existingUser = this.users.get(userData.id!);\n    const user: User = {\n      id: userData.id!,\n      email: userData.email ?? existingUser?.email ?? null,\n      firstName: userData.firstName ?? existingUser?.firstName ?? null,\n      lastName: userData.lastName ?? existingUser?.lastName ?? null,\n      profileImageUrl: userData.profileImageUrl ?? existingUser?.profileImageUrl ?? null,\n      userType: userData.userType ?? existingUser?.userType ?? \"customer\",\n      password: userData.password ?? existingUser?.password ?? null,\n      createdAt: existingUser?.createdAt ?? new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async searchUsers(filters: { email?: string; userType?: string } | Record<string, any>): Promise<User[]> {\n    let filteredUsers = Array.from(this.users.values());\n    \n    if ('email' in filters && filters.email) {\n      filteredUsers = filteredUsers.filter(u => u.email === filters.email);\n    }\n    if ('userType' in filters && filters.userType) {\n      filteredUsers = filteredUsers.filter(u => u.userType === filters.userType);\n    }\n    \n    return filteredUsers;\n  }\n\n  async getProvinces(): Promise<Province[]> {\n    return this.provinces;\n  }\n\n  async getDistrictsByProvince(provinceId: string): Promise<District[]> {\n    return this.districts.filter(d => d.provinceId === provinceId);\n  }\n\n  async getSectorsByDistrict(districtId: string): Promise<Sector[]> {\n    return this.sectors.filter(s => s.districtId === districtId);\n  }\n\n  async createFarmer(farmer: InsertFarmer): Promise<Farmer> {\n    const id = `farm_${Date.now()}`;\n    const newFarmer: Farmer = {\n      id,\n      userId: farmer.userId,\n      farmName: farmer.farmName ?? null,\n      description: farmer.description ?? null,\n      provinceId: farmer.provinceId ?? null,\n      districtId: farmer.districtId ?? null,\n      sectorId: farmer.sectorId ?? null,\n      latitude: farmer.latitude ?? null,\n      longitude: farmer.longitude ?? null,\n      phone: farmer.phone ?? null,\n      rating: \"0\",\n      totalRatings: 0,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.farmers.set(id, newFarmer);\n    return newFarmer;\n  }\n\n  async getFarmerById(id: string): Promise<Farmer | undefined> {\n    return this.farmers.get(id);\n  }\n\n  async getFarmerByUserId(userId: string): Promise<Farmer | undefined> {\n    return Array.from(this.farmers.values()).find(f => f.userId === userId);\n  }\n\n  async searchFarmers(filters: {\n    provinceId?: string;\n    districtId?: string;\n    sectorId?: string;\n    productCategory?: string;\n    maxDistance?: number;\n    userLat?: number;\n    userLng?: number;\n  }): Promise<(Farmer & { user: User })[]> {\n    let filteredFarmers = Array.from(this.farmers.values()).filter(f => f.isActive);\n\n    if (filters.provinceId) {\n      filteredFarmers = filteredFarmers.filter(f => f.provinceId === filters.provinceId);\n    }\n    if (filters.districtId) {\n      filteredFarmers = filteredFarmers.filter(f => f.districtId === filters.districtId);\n    }\n    if (filters.sectorId) {\n      filteredFarmers = filteredFarmers.filter(f => f.sectorId === filters.sectorId);\n    }\n\n    return filteredFarmers.map(farmer => ({\n      ...farmer,\n      user: this.users.get(farmer.userId)!,\n    })).filter(f => f.user);\n  }\n\n  async updateFarmerRating(farmerId: string, newRating: number): Promise<void> {\n    const farmer = this.farmers.get(farmerId);\n    if (farmer) {\n      const currentRating = parseFloat(farmer.rating || \"0\");\n      const currentTotal = farmer.totalRatings || 0;\n      const newTotal = currentTotal + 1;\n      const updatedRating = ((currentRating * currentTotal) + newRating) / newTotal;\n      \n      farmer.rating = updatedRating.toFixed(2);\n      farmer.totalRatings = newTotal;\n      farmer.updatedAt = new Date();\n      this.farmers.set(farmerId, farmer);\n    }\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const id = `prod_${Date.now()}`;\n    const newProduct: Product = {\n      id,\n      farmerId: product.farmerId,\n      categoryId: product.categoryId ?? null,\n      name: product.name,\n      nameKinyarwanda: product.nameKinyarwanda ?? null,\n      description: product.description ?? null,\n      unit: product.unit,\n      pricePerUnit: product.pricePerUnit.toString(),\n      availableQuantity: product.availableQuantity || 0,\n      minOrderQuantity: product.minOrderQuantity || 1,\n      isAvailable: true,\n      imageUrl: product.imageUrl ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.products.set(id, newProduct);\n    return newProduct;\n  }\n\n  async getProductsByFarmer(farmerId: string): Promise<Product[]> {\n    return Array.from(this.products.values()).filter(p => p.farmerId === farmerId);\n  }\n\n  async getProductCategories(): Promise<ProductCategory[]> {\n    return this.productCategories;\n  }\n\n  async searchProducts(filters: {\n    categoryId?: string;\n    provinceId?: string;\n    districtId?: string;\n    minPrice?: number;\n    maxPrice?: number;\n  }): Promise<(Product & { farmer: Farmer & { user: User } })[]> {\n    let filteredProducts = Array.from(this.products.values()).filter(p => p.isAvailable);\n\n    if (filters.categoryId) {\n      filteredProducts = filteredProducts.filter(p => p.categoryId === filters.categoryId);\n    }\n    if (filters.minPrice) {\n      filteredProducts = filteredProducts.filter(p => parseFloat(p.pricePerUnit) >= filters.minPrice!);\n    }\n    if (filters.maxPrice) {\n      filteredProducts = filteredProducts.filter(p => parseFloat(p.pricePerUnit) <= filters.maxPrice!);\n    }\n\n    return filteredProducts.map(product => {\n      const farmer = this.farmers.get(product.farmerId);\n      const user = farmer ? this.users.get(farmer.userId) : undefined;\n      if (farmer && user) {\n        return {\n          ...product,\n          farmer: { ...farmer, user },\n        };\n      }\n      return null;\n    }).filter(Boolean) as (Product & { farmer: Farmer & { user: User } })[];\n  }\n\n  async createOrder(order: InsertOrder, items: Array<{ productId: string; quantity: number; unitPrice: number }>): Promise<Order> {\n    const id = `order_${Date.now()}`;\n    const newOrder: Order = {\n      id,\n      farmerId: order.farmerId,\n      customerId: order.customerId,\n      totalAmount: order.totalAmount,\n      status: \"pending\",\n      deliveryAddress: order.deliveryAddress ?? null,\n      deliveryPhone: order.deliveryPhone ?? null,\n      notes: order.notes ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.orders.set(id, newOrder);\n\n    // Store order items\n    items.forEach((item, index) => {\n      const itemId = `${id}_item_${index}`;\n      this.orderItems.set(itemId, {\n        id: itemId,\n        orderId: id,\n        ...item,\n        totalPrice: (item.quantity * item.unitPrice).toString(),\n      });\n    });\n\n    return newOrder;\n  }\n\n  async getOrdersByCustomer(customerId: string): Promise<(Order & { farmer: Farmer & { user: User } })[]> {\n    return Array.from(this.orders.values())\n      .filter(o => o.customerId === customerId)\n      .map(order => {\n        const farmer = this.farmers.get(order.farmerId);\n        const user = farmer ? this.users.get(farmer.userId) : undefined;\n        if (farmer && user) {\n          return { ...order, farmer: { ...farmer, user } };\n        }\n        return null;\n      })\n      .filter(Boolean) as (Order & { farmer: Farmer & { user: User } })[];\n  }\n\n  async getOrdersByFarmer(farmerId: string): Promise<(Order & { customer: User })[]> {\n    return Array.from(this.orders.values())\n      .filter(o => o.farmerId === farmerId)\n      .map(order => {\n        const customer = this.users.get(order.customerId);\n        if (customer) {\n          return { ...order, customer };\n        }\n        return null;\n      })\n      .filter(Boolean) as (Order & { customer: User })[];\n  }\n\n  async updateOrderStatus(orderId: string, status: string): Promise<void> {\n    const order = this.orders.get(orderId);\n    if (order) {\n      order.status = status;\n      order.updatedAt = new Date();\n      this.orders.set(orderId, order);\n    }\n  }\n\n  async createReview(review: Omit<Review, 'id' | 'createdAt'>): Promise<Review> {\n    const id = `review_${Date.now()}`;\n    const newReview: Review = {\n      ...review,\n      id,\n      createdAt: new Date(),\n    };\n    this.reviews.set(id, newReview);\n\n    // Update farmer rating\n    await this.updateFarmerRating(review.farmerId, review.rating);\n\n    return newReview;\n  }\n\n  async getReviewsByFarmer(farmerId: string): Promise<(Review & { customer: User })[]> {\n    return Array.from(this.reviews.values())\n      .filter(r => r.farmerId === farmerId)\n      .map(review => {\n        const customer = this.users.get(review.customerId);\n        if (customer) {\n          return { ...review, customer };\n        }\n        return null;\n      })\n      .filter(Boolean) as (Review & { customer: User })[];\n  }\n\n  async saveDemandPrediction(prediction: Omit<DemandPrediction, 'id' | 'createdAt'>): Promise<DemandPrediction> {\n    const id = `pred_${Date.now()}`;\n    const newPrediction: DemandPrediction = {\n      ...prediction,\n      id,\n      createdAt: new Date(),\n    };\n    this.demandPredictions.set(id, newPrediction);\n    return newPrediction;\n  }\n\n  async getDemandPredictions(categoryId?: string, provinceId?: string): Promise<DemandPrediction[]> {\n    let predictions = Array.from(this.demandPredictions.values());\n    if (categoryId) {\n      predictions = predictions.filter(p => p.productCategoryId === categoryId);\n    }\n    if (provinceId) {\n      predictions = predictions.filter(p => p.provinceId === provinceId);\n    }\n    return predictions;\n  }\n\n  async saveRecommendation(recommendation: Omit<Recommendation, 'id' | 'createdAt'>): Promise<Recommendation> {\n    const id = `rec_${Date.now()}`;\n    const newRecommendation: Recommendation = {\n      ...recommendation,\n      id,\n      createdAt: new Date(),\n    };\n    this.recommendations.set(id, newRecommendation);\n    return newRecommendation;\n  }\n\n  async getRecommendationsForUser(userId: string): Promise<(Recommendation & { product: Product & { farmer: Farmer } })[]> {\n    return Array.from(this.recommendations.values())\n      .filter(r => r.userId === userId)\n      .map(rec => {\n        const product = this.products.get(rec.productId);\n        const farmer = product ? this.farmers.get(product.farmerId) : undefined;\n        if (product && farmer) {\n          return { ...rec, product: { ...product, farmer } };\n        }\n        return null;\n      })\n      .filter(Boolean) as (Recommendation & { product: Product & { farmer: Farmer } })[];\n  }\n\n  async getProductPriceComparison(categoryId: string, provinceId?: string): Promise<Array<{\n    product: Product;\n    farmer: Farmer & { user: User };\n    distance?: number;\n  }>> {\n    const products = await this.searchProducts({ categoryId, provinceId });\n    return products.map(p => ({\n      product: p,\n      farmer: p.farmer,\n      distance: Math.random() * 10, // Mock distance calculation\n    })).sort((a, b) => parseFloat(a.product.pricePerUnit) - parseFloat(b.product.pricePerUnit));\n  }\n\n  // Admin operations (using existing searchUsers method above)\n\n  async getAllOrders() {\n    const results = [];\n    for (const order of Array.from(this.orders.values())) {\n      const customer = this.users.get(order.customerId);\n      const farmer = this.farmers.get(order.farmerId);\n      if (customer && farmer) {\n        const farmerUser = this.users.get(farmer.userId);\n        if (farmerUser) {\n          results.push({\n            ...order,\n            customer,\n            farmer: { ...farmer, user: farmerUser }\n          });\n        }\n      }\n    }\n    return results;\n  }\n\n  async getAllProducts() {\n    const results = [];\n    for (const product of Array.from(this.products.values())) {\n      const farmer = this.farmers.get(product.farmerId);\n      if (farmer) {\n        const user = this.users.get(farmer.userId);\n        if (user) {\n          results.push({\n            ...product,\n            farmer: { ...farmer, user }\n          });\n        }\n      }\n    }\n    return results;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":21062},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table - required for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - required for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  userType: varchar(\"user_type\").notNull().default(\"customer\"), // \"farmer\", \"customer\", \"admin\"\n  password: varchar(\"password\"), // For email/password authentication\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Rwanda location data\nexport const provinces = pgTable(\"provinces\", {\n  id: varchar(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull(),\n  nameKinyarwanda: varchar(\"name_kinyarwanda\"),\n});\n\nexport const districts = pgTable(\"districts\", {\n  id: varchar(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull(),\n  nameKinyarwanda: varchar(\"name_kinyarwanda\"),\n  provinceId: varchar(\"province_id\").references(() => provinces.id),\n});\n\nexport const sectors = pgTable(\"sectors\", {\n  id: varchar(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull(),\n  nameKinyarwanda: varchar(\"name_kinyarwanda\"),\n  districtId: varchar(\"district_id\").references(() => districts.id),\n});\n\n// Farmer profiles\nexport const farmers = pgTable(\"farmers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  farmName: varchar(\"farm_name\"),\n  description: text(\"description\"),\n  provinceId: varchar(\"province_id\").references(() => provinces.id),\n  districtId: varchar(\"district_id\").references(() => districts.id),\n  sectorId: varchar(\"sector_id\").references(() => sectors.id),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 7 }),\n  longitude: decimal(\"longitude\", { precision: 10, scale: 7 }),\n  phone: varchar(\"phone\"),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  totalRatings: integer(\"total_ratings\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Product categories\nexport const productCategories = pgTable(\"product_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  nameKinyarwanda: varchar(\"name_kinyarwanda\"),\n  description: text(\"description\"),\n});\n\n// Products\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  farmerId: varchar(\"farmer_id\").references(() => farmers.id).notNull(),\n  categoryId: varchar(\"category_id\").references(() => productCategories.id),\n  name: varchar(\"name\").notNull(),\n  nameKinyarwanda: varchar(\"name_kinyarwanda\"),\n  description: text(\"description\"),\n  unit: varchar(\"unit\").notNull(), // \"kg\", \"piece\", \"30eggs\", etc.\n  pricePerUnit: decimal(\"price_per_unit\", { precision: 10, scale: 2 }).notNull(),\n  availableQuantity: integer(\"available_quantity\").default(0),\n  minOrderQuantity: integer(\"min_order_quantity\").default(1),\n  isAvailable: boolean(\"is_available\").default(true),\n  imageUrl: varchar(\"image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Orders\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: varchar(\"customer_id\").references(() => users.id).notNull(),\n  farmerId: varchar(\"farmer_id\").references(() => farmers.id).notNull(),\n  status: varchar(\"status\").notNull().default(\"pending\"), // \"pending\", \"confirmed\", \"delivered\", \"cancelled\"\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  deliveryAddress: text(\"delivery_address\"),\n  deliveryPhone: varchar(\"delivery_phone\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Order items\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// Reviews and ratings\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: varchar(\"customer_id\").references(() => users.id).notNull(),\n  farmerId: varchar(\"farmer_id\").references(() => farmers.id).notNull(),\n  orderId: varchar(\"order_id\").references(() => orders.id),\n  rating: integer(\"rating\").notNull(), // 1-5\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// ML model predictions\nexport const demandPredictions = pgTable(\"demand_predictions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productCategoryId: varchar(\"product_category_id\").references(() => productCategories.id),\n  provinceId: varchar(\"province_id\").references(() => provinces.id),\n  predictedDemand: decimal(\"predicted_demand\", { precision: 10, scale: 2 }),\n  confidenceScore: decimal(\"confidence_score\", { precision: 5, scale: 4 }),\n  predictionDate: timestamp(\"prediction_date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Product recommendations\nexport const recommendations = pgTable(\"recommendations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  similarityScore: decimal(\"similarity_score\", { precision: 5, scale: 4 }),\n  recommendationType: varchar(\"recommendation_type\"), // \"price\", \"location\", \"quality\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Export types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertFarmer = typeof farmers.$inferInsert;\nexport type Farmer = typeof farmers.$inferSelect;\nexport type InsertProduct = typeof products.$inferInsert;\nexport type Product = typeof products.$inferSelect;\nexport type InsertOrder = typeof orders.$inferInsert;\nexport type Order = typeof orders.$inferSelect;\nexport type Province = typeof provinces.$inferSelect;\nexport type District = typeof districts.$inferSelect;\nexport type Sector = typeof sectors.$inferSelect;\nexport type ProductCategory = typeof productCategories.$inferSelect;\nexport type Review = typeof reviews.$inferSelect;\nexport type DemandPrediction = typeof demandPredictions.$inferSelect;\nexport type Recommendation = typeof recommendations.$inferSelect;\n\n// Insert schemas\nexport const insertFarmerSchema = createInsertSchema(farmers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n","size_bytes":7886},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport FarmerDashboard from \"@/pages/farmer-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport CustomerDashboard from \"@/pages/customer-dashboard\";\nimport CustomerLogin from \"@/pages/customer-login\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport ProductComparison from \"@/pages/product-comparison\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {/* Login routes - always accessible */}\n      <Route path=\"/customer/login\" component={CustomerLogin} />\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      \n      {/* Authenticated routes */}\n      {isLoading ? (\n        <Route path=\"/\" component={Landing} />\n      ) : !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route component={CustomerLogin} />\n        </>\n      ) : (\n        <>\n          {/* Route users to appropriate dashboards based on user type */}\n          <Route path=\"/\">\n            {() => {\n              switch (user?.userType) {\n                case 'admin':\n                  return <AdminDashboard />;\n                case 'farmer':\n                  return <FarmerDashboard />;\n                case 'customer':\n                  return <CustomerDashboard />;\n                default:\n                  return <Home />;\n              }\n            }}\n          </Route>\n          \n          {/* Specific dashboard routes */}\n          <Route path=\"/farmer-dashboard\" component={FarmerDashboard} />\n          <Route path=\"/admin-dashboard\" component={AdminDashboard} />\n          <Route path=\"/customer-dashboard\" component={CustomerDashboard} />\n          <Route path=\"/price-comparison/:categoryId\" component={ProductComparison} />\n          <Route path=\"/home\" component={Home} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2519},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(159 88% 40%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(159 50% 92%);\n  --accent-foreground: hsl(159 88% 40%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(159 88% 40%);\n  --chart-1: hsl(159 88% 40%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(159 88% 40%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(159 50% 92%);\n  --sidebar-accent-foreground: hsl(159 88% 40%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(159 88% 40%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(159 88% 40% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(159 88% 40% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(159 88% 40% / 0.00), 0px 1px 2px -1px hsl(159 88% 40% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(159 88% 40% / 0.00), 0px 1px 2px -1px hsl(159 88% 40% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(159 88% 40% / 0.00), 0px 2px 4px -1px hsl(159 88% 40% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(159 88% 40% / 0.00), 0px 4px 6px -1px hsl(159 88% 40% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(159 88% 40% / 0.00), 0px 8px 10px -1px hsl(159 88% 40% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(159 88% 40% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  --rwanda-green: hsl(159 88% 40%);\n  --rwanda-teal: hsl(180 89% 29%);\n  --rwanda-amber: hsl(42 93% 56%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(159 88% 40%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(159 50% 15%);\n  --accent-foreground: hsl(159 88% 40%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(159 88% 40%);\n  --chart-1: hsl(159 88% 40%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(159 88% 40%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(159 50% 15%);\n  --sidebar-accent-foreground: hsl(159 88% 40%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(159 88% 40%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(159 88% 40% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(159 88% 40% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(159 88% 40% / 0.00), 0px 1px 2px -1px hsl(159 88% 40% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(159 88% 40% / 0.00), 0px 1px 2px -1px hsl(159 88% 40% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(159 88% 40% / 0.00), 0px 2px 4px -1px hsl(159 88% 40% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(159 88% 40% / 0.00), 0px 4px 6px -1px hsl(159 88% 40% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(159 88% 40% / 0.00), 0px 8px 10px -1px hsl(159 88% 40% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(159 88% 40% / 0.00);\n  --rwanda-green: hsl(159 88% 40%);\n  --rwanda-teal: hsl(180 89% 29%);\n  --rwanda-amber: hsl(42 93% 56%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n.rwanda-green {\n  color: var(--rwanda-green);\n}\n\n.bg-rwanda-green {\n  background-color: var(--rwanda-green);\n}\n\n.rwanda-teal {\n  color: var(--rwanda-teal);\n}\n\n.bg-rwanda-teal {\n  background-color: var(--rwanda-teal);\n}\n\n.rwanda-amber {\n  color: var(--rwanda-amber);\n}\n\n.bg-rwanda-amber {\n  background-color: var(--rwanda-amber);\n}\n\n.border-rwanda-green {\n  border-color: var(--rwanda-green);\n}\n\n.hover\\:bg-emerald-700:hover {\n  background-color: hsl(159 78% 33%);\n}\n\n.text-rwanda-green {\n  color: var(--rwanda-green);\n}\n\n.text-rwanda-teal {\n  color: var(--rwanda-teal);\n}\n\n.text-rwanda-amber {\n  color: var(--rwanda-amber);\n}\n","size_bytes":5277},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/farmer-card.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Star, MapPin } from \"lucide-react\";\n\ninterface FarmerCardProps {\n  farmer: {\n    id: string;\n    name?: string;\n    user?: {\n      firstName: string;\n      lastName: string;\n    };\n    farmName?: string;\n    location?: string;\n    rating?: number;\n    products?: Array<{\n      name: string;\n      price: number;\n    }>;\n    image?: string;\n    provinceId?: string;\n    districtId?: string;\n  };\n}\n\nexport default function FarmerCard({ farmer }: FarmerCardProps) {\n  const farmerName = farmer.name || \n    (farmer.user ? `${farmer.user.firstName} ${farmer.user.lastName}` : 'Unknown Farmer');\n  const farmerRating = farmer.rating || 0;\n\n  // Sample products if none provided\n  const products = farmer.products || [\n    { name: \"Inkoko (kg)\", price: 4500 },\n    { name: \"Amagi (30)\", price: 3000 }\n  ];\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n    \n    for (let i = 0; i < fullStars; i++) {\n      stars.push(<Star key={i} className=\"h-4 w-4 fill-current text-yellow-400\" />);\n    }\n    \n    if (hasHalfStar) {\n      stars.push(<Star key=\"half\" className=\"h-4 w-4 fill-current text-yellow-400 opacity-50\" />);\n    }\n    \n    const emptyStars = 5 - Math.ceil(rating);\n    for (let i = 0; i < emptyStars; i++) {\n      stars.push(<Star key={`empty-${i}`} className=\"h-4 w-4 text-gray-300\" />);\n    }\n    \n    return stars;\n  };\n\n  return (\n    <Card className=\"overflow-hidden shadow-lg hover:shadow-xl transition-shadow\">\n      <div className=\"h-48 bg-gradient-to-br from-green-100 to-green-200\">\n        {farmer.image ? (\n          <img \n            src={farmer.image} \n            alt={`${farmerName} farm`}\n            className=\"w-full h-full object-cover\"\n          />\n        ) : (\n          <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-rwanda-green/20 to-rwanda-teal/20\">\n            <div className=\"text-center\">\n              <MapPin className=\"h-12 w-12 text-rwanda-green mx-auto mb-2\" />\n              <p className=\"text-rwanda-green font-medium\">Rwanda Farm</p>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-bold text-gray-900\">{farmerName}</h3>\n          <div className=\"flex items-center\">\n            <div className=\"flex\">\n              {renderStars(farmerRating)}\n            </div>\n            <span className=\"text-sm text-gray-600 ml-2\">{farmerRating.toFixed(1)}</span>\n          </div>\n        </div>\n        \n        <p className=\"text-gray-600 mb-4\">\n          {farmer.location || `${farmer.districtId || 'District'}, ${farmer.provinceId || 'Province'} • 2.3km imbere`}\n        </p>\n        \n        <div className=\"space-y-2 mb-4\">\n          {products.map((product, index) => (\n            <div key={index} className=\"flex justify-between items-center\">\n              <span className=\"text-gray-700\">{product.name}</span>\n              <span className=\"font-semibold text-rwanda-green\">\n                {product.price.toLocaleString()} RWF\n              </span>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          <Button className=\"flex-1 bg-rwanda-green text-white hover:bg-emerald-700\">\n            Gura\n          </Button>\n          <Button \n            variant=\"outline\" \n            className=\"flex-1 border-rwanda-green text-rwanda-green hover:bg-emerald-50\"\n          >\n            Reba\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3774},"client/src/components/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Sprout, Menu, LogOut, User } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useState } from \"react\";\n\nexport default function Header() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <Sprout className=\"text-rwanda-green h-8 w-8\" />\n            <span className=\"text-xl font-bold text-gray-900\">AgriConnect</span>\n            <span className=\"text-sm text-gray-500 hidden sm:inline\">Rwanda</span>\n          </Link>\n          \n          {isAuthenticated ? (\n            <>\n              <nav className=\"hidden md:flex space-x-8\">\n                <Link href=\"/\" className=\"text-gray-700 hover:text-rwanda-green font-medium\">\n                  Abahinzi\n                </Link>\n                <Link href=\"/price-comparison/eggs\" className=\"text-gray-700 hover:text-rwanda-green font-medium\">\n                  Ibicuruzwa\n                </Link>\n                <Link href=\"/\" className=\"text-gray-700 hover:text-rwanda-green font-medium\">\n                  Guhura\n                </Link>\n                {user?.userType === 'admin' && (\n                  <Link href=\"/admin-dashboard\" className=\"text-gray-700 hover:text-rwanda-green font-medium\">\n                    Ubuyobozi\n                  </Link>\n                )}\n                {user?.userType === 'farmer' && (\n                  <Link href=\"/farmer-dashboard\" className=\"text-gray-700 hover:text-rwanda-green font-medium\">\n                    Dashboard\n                  </Link>\n                )}\n              </nav>\n\n              <div className=\"flex items-center space-x-4\">\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"flex items-center space-x-2\">\n                      {user?.profileImageUrl ? (\n                        <img \n                          src={user.profileImageUrl} \n                          alt={user.firstName || 'User'} \n                          className=\"h-8 w-8 rounded-full object-cover\"\n                        />\n                      ) : (\n                        <User className=\"h-5 w-5\" />\n                      )}\n                      <span className=\"hidden sm:inline\">{user?.firstName}</span>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/\" className=\"flex items-center\">\n                        <User className=\"mr-2 h-4 w-4\" />\n                        Profile\n                      </Link>\n                    </DropdownMenuItem>\n                    {user?.userType === 'farmer' && (\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/farmer-dashboard\" className=\"flex items-center\">\n                          <Sprout className=\"mr-2 h-4 w-4\" />\n                          Dashboard\n                        </Link>\n                      </DropdownMenuItem>\n                    )}\n                    {user?.userType === 'admin' && (\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/admin-dashboard\" className=\"flex items-center\">\n                          <Sprout className=\"mr-2 h-4 w-4\" />\n                          Admin Dashboard\n                        </Link>\n                      </DropdownMenuItem>\n                    )}\n                    <DropdownMenuItem asChild>\n                      <a href=\"/api/logout\" className=\"flex items-center\">\n                        <LogOut className=\"mr-2 h-4 w-4\" />\n                        Gufunga\n                      </a>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n                \n                <button \n                  className=\"md:hidden text-gray-700\"\n                  onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n                >\n                  <Menu className=\"h-6 w-6\" />\n                </button>\n              </div>\n            </>\n          ) : (\n            <>\n              <nav className=\"hidden md:flex space-x-8\">\n                <a href=\"#\" className=\"text-gray-700 hover:text-rwanda-green font-medium\">\n                  Abahinzi\n                </a>\n                <a href=\"#\" className=\"text-gray-700 hover:text-rwanda-green font-medium\">\n                  Ibicuruzwa\n                </a>\n                <a href=\"#\" className=\"text-gray-700 hover:text-rwanda-green font-medium\">\n                  Guhura\n                </a>\n                <a href=\"#\" className=\"text-gray-700 hover:text-rwanda-green font-medium\">\n                  Ubuyobozi\n                </a>\n              </nav>\n\n              <div className=\"flex items-center space-x-4\">\n                {!isLoading && (\n                  <Button \n                    className=\"bg-rwanda-green text-white hover:bg-emerald-700\"\n                    onClick={() => window.location.href = '/api/login'}\n                  >\n                    <svg className=\"fab fa-google mr-2 h-4 w-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                      <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                      <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n                      <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n                      <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n                    </svg>\n                    Injira\n                  </Button>\n                )}\n                <button className=\"md:hidden text-gray-700\">\n                  <Menu className=\"h-6 w-6\" />\n                </button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Mobile menu */}\n      {isMobileMenuOpen && (\n        <div className=\"md:hidden border-t border-gray-200 bg-white\">\n          <div className=\"px-4 py-2 space-y-1\">\n            <Link href=\"/\" className=\"block px-3 py-2 text-gray-700 hover:text-rwanda-green\">\n              Abahinzi\n            </Link>\n            <Link href=\"/price-comparison/eggs\" className=\"block px-3 py-2 text-gray-700 hover:text-rwanda-green\">\n              Ibicuruzwa\n            </Link>\n            <a href=\"#\" className=\"block px-3 py-2 text-gray-700 hover:text-rwanda-green\">\n              Guhura\n            </a>\n            {isAuthenticated && user?.userType === 'admin' && (\n              <Link href=\"/admin-dashboard\" className=\"block px-3 py-2 text-gray-700 hover:text-rwanda-green\">\n                Ubuyobozi\n              </Link>\n            )}\n            {isAuthenticated && user?.userType === 'farmer' && (\n              <Link href=\"/farmer-dashboard\" className=\"block px-3 py-2 text-gray-700 hover:text-rwanda-green\">\n                Dashboard\n              </Link>\n            )}\n          </div>\n        </div>\n      )}\n    </header>\n  );\n}\n","size_bytes":7856},"client/src/components/location-search.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function LocationSearch() {\n  const [, setLocation] = useLocation();\n  const [selectedProvince, setSelectedProvince] = useState(\"\");\n  const [selectedDistrict, setSelectedDistrict] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  const { data: provinces } = useQuery({\n    queryKey: [\"/api/locations/provinces\"],\n  });\n\n  const { data: districts } = useQuery({\n    queryKey: [\"/api/locations/districts\", selectedProvince],\n    enabled: !!selectedProvince,\n  });\n\n  const { data: categories } = useQuery({\n    queryKey: [\"/api/products/categories\"],\n  });\n\n  const handleSearch = () => {\n    const params = new URLSearchParams();\n    if (selectedProvince) params.append(\"provinceId\", selectedProvince);\n    if (selectedDistrict) params.append(\"districtId\", selectedDistrict);\n    if (selectedCategory) params.append(\"productCategory\", selectedCategory);\n    \n    // Navigate to home page with filters or search results\n    setLocation(`/?${params.toString()}`);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <Card className=\"bg-gray-50 shadow-lg\">\n        <CardContent className=\"p-8\">\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            {/* Province Selection */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Intara\n              </label>\n              <Select onValueChange={setSelectedProvince} value={selectedProvince}>\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue placeholder=\"Hitamo Intara\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {provinces?.map((province: any) => (\n                    <SelectItem key={province.id} value={province.id}>\n                      {province.nameKinyarwanda || province.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* District Selection */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Akarere\n              </label>\n              <Select \n                onValueChange={setSelectedDistrict} \n                value={selectedDistrict}\n                disabled={!selectedProvince}\n              >\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue placeholder=\"Hitamo Akarere\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {districts?.map((district: any) => (\n                    <SelectItem key={district.id} value={district.id}>\n                      {district.nameKinyarwanda || district.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* Product Category Selection */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Ibicuruzwa\n              </label>\n              <Select onValueChange={setSelectedCategory} value={selectedCategory}>\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue placeholder=\"Byose\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Byose</SelectItem>\n                  {categories?.map((category: any) => (\n                    <SelectItem key={category.id} value={category.id}>\n                      {category.nameKinyarwanda || category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <Button \n            onClick={handleSearch}\n            className=\"w-full mt-6 bg-rwanda-green text-white py-4 font-semibold text-lg hover:bg-emerald-700\"\n          >\n            <Search className=\"mr-2 h-5 w-5\" />\n            Shakisha Abahinzi\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4431},"client/src/components/price-comparison.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, Lightbulb } from \"lucide-react\";\n\nexport default function PriceComparison() {\n  const [selectedCategory, setSelectedCategory] = useState(\"eggs\");\n  const [selectedProvince, setSelectedProvince] = useState(\"all\");\n\n  const { data: categories } = useQuery({\n    queryKey: [\"/api/products/categories\"],\n  });\n\n  const { data: provinces } = useQuery({\n    queryKey: [\"/api/locations/provinces\"],\n  });\n\n  const { data: comparisonData } = useQuery({\n    queryKey: [\"/api/products/price-comparison\", selectedCategory],\n    enabled: !!selectedCategory,\n  });\n\n  const getBadgeColor = (recommendation: string) => {\n    switch (recommendation) {\n      case 'best_value':\n        return 'bg-green-50 border-green-200';\n      case 'good_deal':\n        return 'bg-blue-50 border-blue-200';\n      case 'premium':\n        return 'bg-red-50 border-red-200';\n      default:\n        return 'bg-gray-50 border-gray-200';\n    }\n  };\n\n  const getIndicatorColor = (recommendation: string) => {\n    switch (recommendation) {\n      case 'best_value':\n        return 'bg-green-500';\n      case 'good_deal':\n        return 'bg-blue-500';\n      case 'premium':\n        return 'bg-red-500';\n      default:\n        return 'bg-gray-400';\n    }\n  };\n\n  const getVarianceColor = (variance: number) => {\n    if (variance < 0) return 'text-green-600';\n    if (variance > 5) return 'text-red-600';\n    return 'text-gray-500';\n  };\n\n  return (\n    <Card className=\"shadow-lg overflow-hidden\">\n      <div className=\"bg-rwanda-green text-white p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-xl font-bold mb-2\">\n              Ugereranije Ibiciro - AI Analysis\n            </h3>\n            <p className=\"text-emerald-100\">\n              Imiterere ya AI ikoresha cosine similarity algorithm\n            </p>\n          </div>\n          <TrendingUp className=\"h-8 w-8 text-emerald-100\" />\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm text-emerald-100 mb-2\">Icyurutwa</label>\n            <Select onValueChange={setSelectedCategory} value={selectedCategory}>\n              <SelectTrigger className=\"bg-white text-gray-900\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {categories?.map((category: any) => (\n                  <SelectItem key={category.id} value={category.id}>\n                    {category.nameKinyarwanda || category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm text-emerald-100 mb-2\">Intara</label>\n            <Select onValueChange={setSelectedProvince} value={selectedProvince}>\n              <SelectTrigger className=\"bg-white text-gray-900\">\n                <SelectValue placeholder=\"Byose\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Byose</SelectItem>\n                {provinces?.map((province: any) => (\n                  <SelectItem key={province.id} value={province.id}>\n                    {province.nameKinyarwanda || province.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n      \n      <CardContent className=\"p-6\">\n        {comparisonData?.products ? (\n          <div className=\"space-y-4\">\n            {comparisonData.products.map((item: any, index: number) => (\n              <div \n                key={item.product.id} \n                className={`flex items-center justify-between p-4 border rounded-lg ${getBadgeColor(item.recommendation)}`}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className={`w-3 h-3 rounded-full ${getIndicatorColor(item.recommendation)}`} />\n                  <div>\n                    <p className=\"font-semibold text-gray-900\">\n                      {item.farmer.user.firstName} {item.farmer.user.lastName} - {item.farmer.farmName || 'Farm'}\n                    </p>\n                    <p className=\"text-sm text-gray-600\">\n                      {item.recommendation === 'best_value' && 'Ibiciro byiza cyane'} \n                      {item.recommendation === 'good_deal' && 'Icyongereza cyiza'}\n                      {item.recommendation === 'premium' && 'Ubunyangamugayo bukomeye'}\n                      {item.distance && ` • ${item.distance?.toFixed(1)}km`}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-xl font-bold text-rwanda-green\">\n                    {parseFloat(item.product.pricePerUnit).toLocaleString()} RWF\n                  </p>\n                  <p className={`text-sm ${getVarianceColor(parseFloat(item.priceVariance))}`}>\n                    {parseFloat(item.priceVariance) > 0 ? '+' : ''}{item.priceVariance}% \n                    {parseFloat(item.priceVariance) === 0 ? ' imiterere rusange' : \n                     parseFloat(item.priceVariance) < 0 ? ' ruta imiterere' : ' kuruta imiterere'}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {/* Sample data for when no comparison data is available */}\n            <div className=\"flex items-center justify-between p-4 bg-green-50 border border-green-200 rounded-lg\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full\" />\n                <div>\n                  <p className=\"font-semibold text-gray-900\">Marie Claire - Kicukiro</p>\n                  <p className=\"text-sm text-gray-600\">Ibiciro byiza cyane • 3.7km</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-xl font-bold text-rwanda-green\">2,800 RWF</p>\n                <p className=\"text-sm text-green-600\">-7% ruta imiterere</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 bg-gray-50 border border-gray-200 rounded-lg\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-3 h-3 bg-gray-400 rounded-full\" />\n                <div>\n                  <p className=\"font-semibold text-gray-900\">Jean Baptiste - Gasabo</p>\n                  <p className=\"text-sm text-gray-600\">Imiterere y'isoko • 2.3km</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-xl font-bold text-gray-700\">3,000 RWF</p>\n                <p className=\"text-sm text-gray-500\">Imiterere rusange</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 bg-red-50 border border-red-200 rounded-lg\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-3 h-3 bg-red-500 rounded-full\" />\n                <div>\n                  <p className=\"font-semibold text-gray-900\">Emmanuel - Nyarugenge</p>\n                  <p className=\"text-sm text-gray-600\">Ubunyangamugayo bukomeye • 1.8km</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-xl font-bold text-red-600\">3,200 RWF</p>\n                <p className=\"text-sm text-red-600\">+7% kuruta imiterere</p>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n          <h4 className=\"font-semibold text-blue-900 mb-2 flex items-center\">\n            <Lightbulb className=\"mr-2 h-5 w-5\" />\n            Igitekerezo cya AI\n          </h4>\n          <p className=\"text-blue-800\">\n            {comparisonData?.analysis?.aiRecommendation || \n             \"AI iragusaba gusanga umuhinzi utanga ibiciro byiza, ingaruka nziza, n'aho hari hafi yawe.\"}\n          </p>\n          {comparisonData?.analysis && (\n            <div className=\"mt-3 grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium\">Average Price: </span>\n                <span className=\"text-blue-700\">{comparisonData.analysis.averagePrice} RWF</span>\n              </div>\n              <div>\n                <span className=\"font-medium\">Best Value: </span>\n                <span className=\"text-blue-700\">{comparisonData.analysis.bestValue}</span>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9076},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/pdfGenerator.ts":{"content":"import jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\n\nexport interface PDFData {\n  title: string;\n  subtitle?: string;\n  data: any[];\n  columns: Array<{\n    header: string;\n    dataKey: string;\n  }>;\n  summary?: Array<{\n    label: string;\n    value: string | number;\n  }>;\n}\n\nexport function generatePDFReport(reportData: PDFData): void {\n  const doc = new jsPDF();\n  \n  // Header\n  doc.setFontSize(20);\n  doc.setTextColor(22, 163, 74); // Rwanda green\n  doc.text('AgriConnect Rwanda', 20, 20);\n  \n  doc.setFontSize(16);\n  doc.setTextColor(0, 0, 0);\n  doc.text(reportData.title, 20, 35);\n  \n  if (reportData.subtitle) {\n    doc.setFontSize(12);\n    doc.setTextColor(100, 100, 100);\n    doc.text(reportData.subtitle, 20, 45);\n  }\n  \n  // Report generated date\n  doc.setFontSize(10);\n  doc.setTextColor(150, 150, 150);\n  doc.text(`Generated on: ${new Date().toLocaleDateString('en-RW')}`, 20, reportData.subtitle ? 55 : 50);\n  \n  let currentY = reportData.subtitle ? 70 : 65;\n  \n  // Summary section if provided\n  if (reportData.summary && reportData.summary.length > 0) {\n    doc.setFontSize(14);\n    doc.setTextColor(0, 0, 0);\n    doc.text('Summary', 20, currentY);\n    currentY += 10;\n    \n    reportData.summary.forEach((item, index) => {\n      doc.setFontSize(11);\n      doc.setTextColor(80, 80, 80);\n      doc.text(`${item.label}: ${item.value}`, 25, currentY + (index * 6));\n    });\n    \n    currentY += (reportData.summary.length * 6) + 15;\n  }\n  \n  // Main data table\n  if (reportData.data.length > 0) {\n    doc.setFontSize(14);\n    doc.setTextColor(0, 0, 0);\n    doc.text('Detailed Data', 20, currentY);\n    currentY += 10;\n    \n    autoTable(doc, {\n      head: [reportData.columns.map(col => col.header)],\n      body: reportData.data.map(row => \n        reportData.columns.map(col => {\n          const value = row[col.dataKey];\n          if (typeof value === 'number') {\n            return value.toLocaleString();\n          }\n          if (value instanceof Date) {\n            return value.toLocaleDateString('en-RW');\n          }\n          return value || '-';\n        })\n      ),\n      startY: currentY,\n      theme: 'grid',\n      headStyles: {\n        fillColor: [22, 163, 74], // Rwanda green\n        textColor: [255, 255, 255],\n        fontSize: 10,\n        fontStyle: 'bold'\n      },\n      bodyStyles: {\n        fontSize: 9,\n        textColor: [60, 60, 60]\n      },\n      alternateRowStyles: {\n        fillColor: [248, 250, 252]\n      },\n      margin: { left: 20, right: 20 },\n    });\n  }\n  \n  // Footer\n  const pageCount = doc.internal.pages.length - 1;\n  for (let i = 1; i <= pageCount; i++) {\n    doc.setPage(i);\n    doc.setFontSize(8);\n    doc.setTextColor(150, 150, 150);\n    doc.text(\n      `Page ${i} of ${pageCount} | AgriConnect Rwanda Admin Report`,\n      20,\n      doc.internal.pageSize.height - 10\n    );\n  }\n  \n  // Download the PDF\n  const filename = `${reportData.title.replace(/\\s+/g, '_').toLowerCase()}_${new Date().getTime()}.pdf`;\n  doc.save(filename);\n}\n\nexport function generateOrdersReport(orders: any[]): void {\n  const totalRevenue = orders.reduce((sum, order) => sum + Number(order.totalAmount), 0);\n  const avgOrderValue = orders.length > 0 ? totalRevenue / orders.length : 0;\n  \n  const reportData: PDFData = {\n    title: 'Orders Report',\n    subtitle: `Analysis of ${orders.length} orders`,\n    data: orders,\n    columns: [\n      { header: 'Order ID', dataKey: 'id' },\n      { header: 'Customer', dataKey: 'customerName' },\n      { header: 'Farmer', dataKey: 'farmerName' },\n      { header: 'Amount (RWF)', dataKey: 'totalAmount' },\n      { header: 'Status', dataKey: 'status' },\n      { header: 'Date', dataKey: 'createdAt' }\n    ],\n    summary: [\n      { label: 'Total Orders', value: orders.length },\n      { label: 'Total Revenue', value: `${totalRevenue.toLocaleString()} RWF` },\n      { label: 'Average Order Value', value: `${avgOrderValue.toLocaleString()} RWF` },\n      { label: 'Pending Orders', value: orders.filter(o => o.status === 'pending').length },\n      { label: 'Completed Orders', value: orders.filter(o => o.status === 'delivered').length }\n    ]\n  };\n  \n  generatePDFReport(reportData);\n}\n\nexport function generateUsersReport(users: any[]): void {\n  const customerCount = users.filter(u => u.userType === 'customer').length;\n  const farmerCount = users.filter(u => u.userType === 'farmer').length;\n  const adminCount = users.filter(u => u.userType === 'admin').length;\n  \n  const reportData: PDFData = {\n    title: 'Users Report',\n    subtitle: `Analysis of ${users.length} registered users`,\n    data: users,\n    columns: [\n      { header: 'User ID', dataKey: 'id' },\n      { header: 'Name', dataKey: 'fullName' },\n      { header: 'Email', dataKey: 'email' },\n      { header: 'User Type', dataKey: 'userType' },\n      { header: 'Registration Date', dataKey: 'createdAt' }\n    ],\n    summary: [\n      { label: 'Total Users', value: users.length },\n      { label: 'Customers', value: customerCount },\n      { label: 'Farmers', value: farmerCount },\n      { label: 'Administrators', value: adminCount },\n      { label: 'Active Users', value: users.length } // Assuming all users are active\n    ]\n  };\n  \n  generatePDFReport(reportData);\n}\n\nexport function generateFarmersReport(farmers: any[]): void {\n  const activeFarmers = farmers.filter(f => f.isActive).length;\n  const avgRating = farmers.length > 0 \n    ? farmers.reduce((sum, f) => sum + Number(f.rating), 0) / farmers.length \n    : 0;\n  \n  const reportData: PDFData = {\n    title: 'Farmers Report',\n    subtitle: `Analysis of ${farmers.length} registered farmers`,\n    data: farmers,\n    columns: [\n      { header: 'Farmer ID', dataKey: 'id' },\n      { header: 'Farm Name', dataKey: 'farmName' },\n      { header: 'Owner', dataKey: 'ownerName' },\n      { header: 'Location', dataKey: 'location' },\n      { header: 'Rating', dataKey: 'rating' },\n      { header: 'Products', dataKey: 'productCount' },\n      { header: 'Status', dataKey: 'status' }\n    ],\n    summary: [\n      { label: 'Total Farmers', value: farmers.length },\n      { label: 'Active Farmers', value: activeFarmers },\n      { label: 'Average Rating', value: avgRating.toFixed(2) },\n      { label: 'Inactive Farmers', value: farmers.length - activeFarmers }\n    ]\n  };\n  \n  generatePDFReport(reportData);\n}\n\nexport function generateProductsReport(products: any[]): void {\n  const availableProducts = products.filter(p => p.isAvailable).length;\n  const totalStock = products.reduce((sum, p) => sum + Number(p.availableQuantity), 0);\n  const avgPrice = products.length > 0 \n    ? products.reduce((sum, p) => sum + Number(p.pricePerUnit), 0) / products.length \n    : 0;\n  \n  const reportData: PDFData = {\n    title: 'Products Report',\n    subtitle: `Analysis of ${products.length} products`,\n    data: products,\n    columns: [\n      { header: 'Product ID', dataKey: 'id' },\n      { header: 'Product Name', dataKey: 'name' },\n      { header: 'Farmer', dataKey: 'farmerName' },\n      { header: 'Category', dataKey: 'category' },\n      { header: 'Price (RWF)', dataKey: 'pricePerUnit' },\n      { header: 'Stock', dataKey: 'availableQuantity' },\n      { header: 'Status', dataKey: 'status' }\n    ],\n    summary: [\n      { label: 'Total Products', value: products.length },\n      { label: 'Available Products', value: availableProducts },\n      { label: 'Total Stock Units', value: totalStock },\n      { label: 'Average Price', value: `${avgPrice.toLocaleString()} RWF` },\n      { label: 'Out of Stock', value: products.filter(p => p.availableQuantity === 0).length }\n    ]\n  };\n  \n  generatePDFReport(reportData);\n}","size_bytes":7607},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/rwandaData.ts":{"content":"export interface Province {\n  id: string;\n  name: string;\n  nameKinyarwanda: string;\n}\n\nexport interface District {\n  id: string;\n  name: string;\n  nameKinyarwanda: string;\n  provinceId: string;\n}\n\nexport interface Sector {\n  id: string;\n  name: string;\n  nameKinyarwanda: string;\n  districtId: string;\n}\n\nexport const RWANDA_PROVINCES: Province[] = [\n  {\n    id: \"kigali\",\n    name: \"Kigali City\",\n    nameKinyarwanda: \"Umujyi wa Kigali\"\n  },\n  {\n    id: \"northern\",\n    name: \"Northern Province\",\n    nameKinyarwanda: \"Intara y'Amajyaruguru\"\n  },\n  {\n    id: \"southern\",\n    name: \"Southern Province\", \n    nameKinyarwanda: \"Intara y'Amajyepfo\"\n  },\n  {\n    id: \"eastern\",\n    name: \"Eastern Province\",\n    nameKinyarwanda: \"Intara y'Iburasirazuba\"\n  },\n  {\n    id: \"western\",\n    name: \"Western Province\",\n    nameKinyarwanda: \"Intara y'Iburengerazuba\"\n  }\n];\n\nexport const RWANDA_DISTRICTS: District[] = [\n  // Kigali City\n  {\n    id: \"gasabo\",\n    name: \"Gasabo\",\n    nameKinyarwanda: \"Gasabo\",\n    provinceId: \"kigali\"\n  },\n  {\n    id: \"kicukiro\",\n    name: \"Kicukiro\", \n    nameKinyarwanda: \"Kicukiro\",\n    provinceId: \"kigali\"\n  },\n  {\n    id: \"nyarugenge\",\n    name: \"Nyarugenge\",\n    nameKinyarwanda: \"Nyarugenge\", \n    provinceId: \"kigali\"\n  },\n  \n  // Northern Province\n  {\n    id: \"burera\",\n    name: \"Burera\",\n    nameKinyarwanda: \"Burera\",\n    provinceId: \"northern\"\n  },\n  {\n    id: \"gakenke\",\n    name: \"Gakenke\",\n    nameKinyarwanda: \"Gakenke\",\n    provinceId: \"northern\"\n  },\n  {\n    id: \"gicumbi\",\n    name: \"Gicumbi\",\n    nameKinyarwanda: \"Gicumbi\",\n    provinceId: \"northern\"\n  },\n  {\n    id: \"musanze\",\n    name: \"Musanze\",\n    nameKinyarwanda: \"Musanze\",\n    provinceId: \"northern\"\n  },\n  {\n    id: \"rulindo\",\n    name: \"Rulindo\",\n    nameKinyarwanda: \"Rulindo\",\n    provinceId: \"northern\"\n  },\n  \n  // Southern Province\n  {\n    id: \"gisagara\",\n    name: \"Gisagara\",\n    nameKinyarwanda: \"Gisagara\",\n    provinceId: \"southern\"\n  },\n  {\n    id: \"huye\",\n    name: \"Huye\",\n    nameKinyarwanda: \"Huye\",\n    provinceId: \"southern\"\n  },\n  {\n    id: \"kamonyi\",\n    name: \"Kamonyi\",\n    nameKinyarwanda: \"Kamonyi\",\n    provinceId: \"southern\"\n  },\n  {\n    id: \"muhanga\",\n    name: \"Muhanga\",\n    nameKinyarwanda: \"Muhanga\",\n    provinceId: \"southern\"\n  },\n  {\n    id: \"nyamagabe\",\n    name: \"Nyamagabe\",\n    nameKinyarwanda: \"Nyamagabe\",\n    provinceId: \"southern\"\n  },\n  {\n    id: \"nyanza\",\n    name: \"Nyanza\",\n    nameKinyarwanda: \"Nyanza\",\n    provinceId: \"southern\"\n  },\n  {\n    id: \"nyaruguru\",\n    name: \"Nyaruguru\",\n    nameKinyarwanda: \"Nyaruguru\",\n    provinceId: \"southern\"\n  },\n  {\n    id: \"ruhango\",\n    name: \"Ruhango\",\n    nameKinyarwanda: \"Ruhango\",\n    provinceId: \"southern\"\n  },\n  \n  // Eastern Province\n  {\n    id: \"bugesera\",\n    name: \"Bugesera\",\n    nameKinyarwanda: \"Bugesera\",\n    provinceId: \"eastern\"\n  },\n  {\n    id: \"gatsibo\",\n    name: \"Gatsibo\",\n    nameKinyarwanda: \"Gatsibo\", \n    provinceId: \"eastern\"\n  },\n  {\n    id: \"kayonza\",\n    name: \"Kayonza\",\n    nameKinyarwanda: \"Kayonza\",\n    provinceId: \"eastern\"\n  },\n  {\n    id: \"kirehe\",\n    name: \"Kirehe\",\n    nameKinyarwanda: \"Kirehe\",\n    provinceId: \"eastern\"\n  },\n  {\n    id: \"ngoma\",\n    name: \"Ngoma\",\n    nameKinyarwanda: \"Ngoma\",\n    provinceId: \"eastern\"\n  },\n  {\n    id: \"nyagatare\",\n    name: \"Nyagatare\",\n    nameKinyarwanda: \"Nyagatare\",\n    provinceId: \"eastern\"\n  },\n  {\n    id: \"rwamagana\",\n    name: \"Rwamagana\",\n    nameKinyarwanda: \"Rwamagana\",\n    provinceId: \"eastern\"\n  },\n  \n  // Western Province\n  {\n    id: \"karongi\",\n    name: \"Karongi\",\n    nameKinyarwanda: \"Karongi\",\n    provinceId: \"western\"\n  },\n  {\n    id: \"ngororero\",\n    name: \"Ngororero\",\n    nameKinyarwanda: \"Ngororero\",\n    provinceId: \"western\"\n  },\n  {\n    id: \"nyabihu\",\n    name: \"Nyabihu\",\n    nameKinyarwanda: \"Nyabihu\",\n    provinceId: \"western\"\n  },\n  {\n    id: \"nyamasheke\",\n    name: \"Nyamasheke\",\n    nameKinyarwanda: \"Nyamasheke\",\n    provinceId: \"western\"\n  },\n  {\n    id: \"rubavu\",\n    name: \"Rubavu\",\n    nameKinyarwanda: \"Rubavu\",\n    provinceId: \"western\"\n  },\n  {\n    id: \"rusizi\",\n    name: \"Rusizi\",\n    nameKinyarwanda: \"Rusizi\",\n    provinceId: \"western\"\n  },\n  {\n    id: \"rutsiro\",\n    name: \"Rutsiro\",\n    nameKinyarwanda: \"Rutsiro\",\n    provinceId: \"western\"\n  }\n];\n\nexport const RWANDA_SECTORS: Sector[] = [\n  // Gasabo District\n  {\n    id: \"bumbogo\",\n    name: \"Bumbogo\",\n    nameKinyarwanda: \"Bumbogo\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"gasange\",\n    name: \"Gasange\",\n    nameKinyarwanda: \"Gasange\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"gatsata\",\n    name: \"Gatsata\",\n    nameKinyarwanda: \"Gatsata\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"gikomero\",\n    name: \"Gikomero\",\n    nameKinyarwanda: \"Gikomero\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"gisozi\",\n    name: \"Gisozi\",\n    nameKinyarwanda: \"Gisozi\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"jabana\",\n    name: \"Jabana\",\n    nameKinyarwanda: \"Jabana\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"jali\",\n    name: \"Jali\",\n    nameKinyarwanda: \"Jali\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"kacyiru\",\n    name: \"Kacyiru\",\n    nameKinyarwanda: \"Kacyiru\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"kimihurura\",\n    name: \"Kimihurura\",\n    nameKinyarwanda: \"Kimihurura\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"kimisagara\",\n    name: \"Kimisagara\", \n    nameKinyarwanda: \"Kimisagara\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"kinyinya\",\n    name: \"Kinyinya\",\n    nameKinyarwanda: \"Kinyinya\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"ndera\",\n    name: \"Ndera\",\n    nameKinyarwanda: \"Ndera\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"nduba\",\n    name: \"Nduba\",\n    nameKinyarwanda: \"Nduba\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"remera\",\n    name: \"Remera\",\n    nameKinyarwanda: \"Remera\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"rusororo\",\n    name: \"Rusororo\",\n    nameKinyarwanda: \"Rusororo\",\n    districtId: \"gasabo\"\n  },\n  {\n    id: \"rutunga\",\n    name: \"Rutunga\",\n    nameKinyarwanda: \"Rutunga\",\n    districtId: \"gasabo\"\n  },\n  \n  // Kicukiro District\n  {\n    id: \"gahanga\",\n    name: \"Gahanga\",\n    nameKinyarwanda: \"Gahanga\",\n    districtId: \"kicukiro\"\n  },\n  {\n    id: \"gatenga\",\n    name: \"Gatenga\",\n    nameKinyarwanda: \"Gatenga\", \n    districtId: \"kicukiro\"\n  },\n  {\n    id: \"gikondo\",\n    name: \"Gikondo\",\n    nameKinyarwanda: \"Gikondo\",\n    districtId: \"kicukiro\"\n  },\n  {\n    id: \"kanombe\",\n    name: \"Kanombe\",\n    nameKinyarwanda: \"Kanombe\",\n    districtId: \"kicukiro\"\n  },\n  {\n    id: \"kicukiro\",\n    name: \"Kicukiro\",\n    nameKinyarwanda: \"Kicukiro\",\n    districtId: \"kicukiro\"\n  },\n  {\n    id: \"niboye\",\n    name: \"Niboye\",\n    nameKinyarwanda: \"Niboye\",\n    districtId: \"kicukiro\"\n  },\n  {\n    id: \"nyarugunga\",\n    name: \"Nyarugunga\",\n    nameKinyarwanda: \"Nyarugunga\",\n    districtId: \"kicukiro\"\n  },\n  \n  // Nyarugenge District  \n  {\n    id: \"gitega\",\n    name: \"Gitega\",\n    nameKinyarwanda: \"Gitega\",\n    districtId: \"nyarugenge\"\n  },\n  {\n    id: \"kanyinya\",\n    name: \"Kanyinya\",\n    nameKinyarwanda: \"Kanyinya\",\n    districtId: \"nyarugenge\"\n  },\n  {\n    id: \"kigali\",\n    name: \"Kigali\",\n    nameKinyarwanda: \"Kigali\",\n    districtId: \"nyarugenge\"\n  },\n  {\n    id: \"kimisagara_nyarugenge\",\n    name: \"Kimisagara\",\n    nameKinyarwanda: \"Kimisagara\",\n    districtId: \"nyarugenge\"\n  },\n  {\n    id: \"mageragere\",\n    name: \"Mageragere\",\n    nameKinyarwanda: \"Mageragere\",\n    districtId: \"nyarugenge\"\n  },\n  {\n    id: \"muhima\",\n    name: \"Muhima\",\n    nameKinyarwanda: \"Muhima\",\n    districtId: \"nyarugenge\"\n  },\n  {\n    id: \"nyakabanda\",\n    name: \"Nyakabanda\",\n    nameKinyarwanda: \"Nyakabanda\",\n    districtId: \"nyarugenge\"\n  },\n  {\n    id: \"nyamirambo\",\n    name: \"Nyamirambo\",\n    nameKinyarwanda: \"Nyamirambo\",\n    districtId: \"nyarugenge\"\n  },\n  {\n    id: \"rwezamenyo\",\n    name: \"Rwezamenyo\",\n    nameKinyarwanda: \"Rwezamenyo\",\n    districtId: \"nyarugenge\"\n  }\n];\n\nexport const PRODUCT_CATEGORIES = [\n  {\n    id: \"poultry\",\n    name: \"Poultry\",\n    nameKinyarwanda: \"Inkoko\",\n    description: \"Chickens and poultry products\"\n  },\n  {\n    id: \"eggs\", \n    name: \"Eggs\",\n    nameKinyarwanda: \"Amagi\",\n    description: \"Fresh eggs\"\n  },\n  {\n    id: \"manure\",\n    name: \"Manure\",\n    nameKinyarwanda: \"Ifumbire\",\n    description: \"Organic fertilizer\"\n  }\n];\n\n// Helper functions\nexport const getProvinceById = (id: string): Province | undefined => {\n  return RWANDA_PROVINCES.find(province => province.id === id);\n};\n\nexport const getDistrictsByProvince = (provinceId: string): District[] => {\n  return RWANDA_DISTRICTS.filter(district => district.provinceId === provinceId);\n};\n\nexport const getSectorsByDistrict = (districtId: string): Sector[] => {\n  return RWANDA_SECTORS.filter(sector => sector.districtId === districtId);\n};\n\nexport const getDistrictById = (id: string): District | undefined => {\n  return RWANDA_DISTRICTS.find(district => district.id === id);\n};\n\nexport const getSectorById = (id: string): Sector | undefined => {\n  return RWANDA_SECTORS.find(sector => sector.id === id);\n};\n","size_bytes":9031},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Header from \"@/components/header\";\nimport { \n  Users, \n  Sprout, \n  ShoppingCart, \n  TrendingUp, \n  Brain, \n  Target,\n  MapPin,\n  Clock,\n  Download,\n  FileText,\n  BarChart3,\n  DollarSign,\n  Package,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Phone\n} from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  generateOrdersReport, \n  generateUsersReport, \n  generateFarmersReport, \n  generateProductsReport \n} from \"@/lib/pdfGenerator\";\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  // Fetch dashboard statistics\n  const { data: stats, isLoading: loadingStats } = useQuery({\n    queryKey: [\"/api/admin/statistics\"],\n    enabled: isAuthenticated && user?.userType === 'admin',\n  });\n\n  // Fetch all users for management\n  const { data: users, isLoading: loadingUsers } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    enabled: isAuthenticated && user?.userType === 'admin',\n  });\n\n  // Fetch all farmers\n  const { data: farmers, isLoading: loadingFarmers } = useQuery({\n    queryKey: [\"/api/admin/farmers\"],\n    enabled: isAuthenticated && user?.userType === 'admin',\n  });\n\n  // Fetch all orders\n  const { data: orders, isLoading: loadingOrders } = useQuery({\n    queryKey: [\"/api/admin/orders\"],\n    enabled: isAuthenticated && user?.userType === 'admin',\n  });\n\n  // Fetch all products\n  const { data: products, isLoading: loadingProducts } = useQuery({\n    queryKey: [\"/api/admin/products\"],\n    enabled: isAuthenticated && user?.userType === 'admin',\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n\n    if (!isLoading && isAuthenticated && user?.userType !== 'admin') {\n      toast({\n        title: \"Access Denied\",\n        description: \"Admin access required for this page.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  // PDF Report Generation Functions\n  const handleGenerateOrdersReport = () => {\n    if (!orders || orders.length === 0) {\n      toast({\n        title: \"No Data Available\",\n        description: \"No orders found to generate report\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formattedOrders = orders.map((order: any) => ({\n      ...order,\n      customerName: `${order.customer?.firstName || ''} ${order.customer?.lastName || ''}`.trim(),\n      farmerName: `${order.farmer?.user?.firstName || ''} ${order.farmer?.user?.lastName || ''}`.trim(),\n      createdAt: new Date(order.createdAt)\n    }));\n\n    generateOrdersReport(formattedOrders);\n    \n    toast({\n      title: \"Report Generated\",\n      description: \"Orders report has been downloaded successfully\",\n    });\n  };\n\n  const handleGenerateUsersReport = () => {\n    if (!users || users.length === 0) {\n      toast({\n        title: \"No Data Available\", \n        description: \"No users found to generate report\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formattedUsers = users.map((user: any) => ({\n      ...user,\n      fullName: `${user.firstName || ''} ${user.lastName || ''}`.trim(),\n      createdAt: new Date(user.createdAt)\n    }));\n\n    generateUsersReport(formattedUsers);\n    \n    toast({\n      title: \"Report Generated\",\n      description: \"Users report has been downloaded successfully\",\n    });\n  };\n\n  const handleGenerateFarmersReport = () => {\n    if (!farmers || farmers.length === 0) {\n      toast({\n        title: \"No Data Available\",\n        description: \"No farmers found to generate report\", \n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formattedFarmers = farmers.map((farmer: any) => ({\n      ...farmer,\n      ownerName: `${farmer.user?.firstName || ''} ${farmer.user?.lastName || ''}`.trim(),\n      location: `${farmer.sectorId || 'Unknown'}, ${farmer.districtId || 'Unknown'}`,\n      productCount: farmer.products?.length || 0,\n      status: farmer.isActive ? 'Active' : 'Inactive'\n    }));\n\n    generateFarmersReport(formattedFarmers);\n    \n    toast({\n      title: \"Report Generated\",\n      description: \"Farmers report has been downloaded successfully\",\n    });\n  };\n\n  const handleGenerateProductsReport = () => {\n    if (!products || products.length === 0) {\n      toast({\n        title: \"No Data Available\",\n        description: \"No products found to generate report\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formattedProducts = products.map((product: any) => ({\n      ...product,\n      farmerName: `${product.farmer?.user?.firstName || ''} ${product.farmer?.user?.lastName || ''}`.trim(),\n      category: product.category?.name || 'Uncategorized',\n      status: product.isAvailable ? 'Available' : 'Unavailable'\n    }));\n\n    generateProductsReport(formattedProducts);\n    \n    toast({\n      title: \"Report Generated\",\n      description: \"Products report has been downloaded successfully\",\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'confirmed':\n        return 'bg-blue-100 text-blue-800';\n      case 'delivered':\n        return 'bg-green-100 text-green-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (isLoading || loadingStats) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Sprout className=\"h-12 w-12 text-rwanda-green mx-auto mb-4 animate-spin\" />\n          <p className=\"text-gray-600\">Loading admin dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || user?.userType !== 'admin') {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 py-16\">\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Users className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n                Admin Access Required\n              </h2>\n              <p className=\"text-gray-600 mb-6\">\n                You need administrator privileges to access this dashboard.\n              </p>\n              <Button onClick={() => window.location.href = \"/admin/login\"}>\n                Admin Login\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Header Section */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Admin Dashboard\n          </h1>\n          <p className=\"text-gray-600\">\n            Welcome back, {user?.firstName}! Manage AgriConnect Rwanda platform\n          </p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Users className=\"h-8 w-8 text-blue-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Users</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {users?.length || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Sprout className=\"h-8 w-8 text-green-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Active Farmers</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {farmers?.filter((f: any) => f.isActive)?.length || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <ShoppingCart className=\"h-8 w-8 text-purple-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Orders</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {orders?.length || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <DollarSign className=\"h-8 w-8 text-yellow-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Revenue (RWF)</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {orders?.reduce((sum: number, order: any) => sum + Number(order.totalAmount), 0)?.toLocaleString() || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"users\">Users</TabsTrigger>\n            <TabsTrigger value=\"farmers\">Farmers</TabsTrigger>\n            <TabsTrigger value=\"orders\">Orders</TabsTrigger>\n            <TabsTrigger value=\"reports\">Reports</TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <BarChart3 className=\"h-5 w-5 mr-2\" />\n                    Platform Statistics\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Customers</span>\n                      <span className=\"font-semibold\">\n                        {users?.filter((u: any) => u.userType === 'customer')?.length || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Products Listed</span>\n                      <span className=\"font-semibold\">\n                        {products?.length || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Pending Orders</span>\n                      <span className=\"font-semibold\">\n                        {orders?.filter((o: any) => o.status === 'pending')?.length || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Completed Orders</span>\n                      <span className=\"font-semibold\">\n                        {orders?.filter((o: any) => o.status === 'delivered')?.length || 0}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <TrendingUp className=\"h-5 w-5 mr-2\" />\n                    Recent Activity\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {orders?.slice(0, 5).map((order: any) => (\n                      <div key={order.id} className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-600\">\n                          Order #{order.id.slice(-6)}\n                        </span>\n                        <Badge className={getStatusColor(order.status)}>\n                          {order.status}\n                        </Badge>\n                      </div>\n                    )) || (\n                      <p className=\"text-gray-500 text-center py-4\">No recent activity</p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\" className=\"space-y-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"flex items-center\">\n                  <Users className=\"h-5 w-5 mr-2\" />\n                  User Management\n                </CardTitle>\n                <Button onClick={handleGenerateUsersReport} size=\"sm\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Users PDF\n                </Button>\n              </CardHeader>\n              <CardContent>\n                {loadingUsers ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"animate-pulse bg-gray-200 h-16 rounded-lg\" />\n                    ))}\n                  </div>\n                ) : users?.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {users.map((user: any) => (\n                      <div key={user.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900\">\n                              {user.firstName} {user.lastName}\n                            </h3>\n                            <p className=\"text-sm text-gray-600\">{user.email}</p>\n                            <p className=\"text-xs text-gray-500\">\n                              Joined {new Date(user.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <Badge variant={user.userType === 'admin' ? 'destructive' : 'secondary'}>\n                            {user.userType}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-center text-gray-500 py-8\">No users found</p>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Farmers Tab */}\n          <TabsContent value=\"farmers\" className=\"space-y-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"flex items-center\">\n                  <Sprout className=\"h-5 w-5 mr-2\" />\n                  Farmer Management\n                </CardTitle>\n                <Button onClick={handleGenerateFarmersReport} size=\"sm\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Farmers PDF\n                </Button>\n              </CardHeader>\n              <CardContent>\n                {loadingFarmers ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"animate-pulse bg-gray-200 h-20 rounded-lg\" />\n                    ))}\n                  </div>\n                ) : farmers?.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {farmers.map((farmer: any) => (\n                      <div key={farmer.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900\">\n                              {farmer.farmName || 'Unnamed Farm'}\n                            </h3>\n                            <p className=\"text-sm text-gray-600\">\n                              Owner: {farmer.user?.firstName} {farmer.user?.lastName}\n                            </p>\n                            <p className=\"text-xs text-gray-500 flex items-center\">\n                              <MapPin className=\"h-3 w-3 mr-1\" />\n                              {farmer.sectorId}, {farmer.districtId}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge className={farmer.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>\n                              {farmer.isActive ? 'Active' : 'Inactive'}\n                            </Badge>\n                            <p className=\"text-sm text-gray-600 mt-1\">\n                              Rating: {Number(farmer.rating).toFixed(1)}/5\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center text-xs text-gray-500 space-x-4\">\n                          <span>Products: {farmer.products?.length || 0}</span>\n                          <span>Reviews: {farmer.totalRatings}</span>\n                          {farmer.phone && (\n                            <span className=\"flex items-center\">\n                              <Phone className=\"h-3 w-3 mr-1\" />\n                              {farmer.phone}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-center text-gray-500 py-8\">No farmers found</p>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Orders Tab */}\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"flex items-center\">\n                  <ShoppingCart className=\"h-5 w-5 mr-2\" />\n                  Order Management\n                </CardTitle>\n                <Button onClick={handleGenerateOrdersReport} size=\"sm\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Orders PDF\n                </Button>\n              </CardHeader>\n              <CardContent>\n                {loadingOrders ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"animate-pulse bg-gray-200 h-20 rounded-lg\" />\n                    ))}\n                  </div>\n                ) : orders?.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {orders.map((order: any) => (\n                      <div key={order.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900\">\n                              Order #{order.id.slice(-8)}\n                            </h3>\n                            <p className=\"text-sm text-gray-600\">\n                              Customer: {order.customer?.firstName} {order.customer?.lastName}\n                            </p>\n                            <p className=\"text-sm text-gray-600\">\n                              Farmer: {order.farmer?.user?.firstName} {order.farmer?.user?.lastName}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge className={getStatusColor(order.status)}>\n                              {order.status}\n                            </Badge>\n                            <p className=\"text-lg font-bold text-gray-900 mt-1\">\n                              {Number(order.totalAmount).toLocaleString()} RWF\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center text-xs text-gray-500 space-x-4\">\n                          <span className=\"flex items-center\">\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            {new Date(order.createdAt).toLocaleDateString()}\n                          </span>\n                          {order.deliveryAddress && (\n                            <span className=\"flex items-center\">\n                              <MapPin className=\"h-3 w-3 mr-1\" />\n                              {order.deliveryAddress.slice(0, 30)}...\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-center text-gray-500 py-8\">No orders found</p>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Reports Tab */}\n          <TabsContent value=\"reports\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <FileText className=\"h-5 w-5 mr-2\" />\n                    Generate Reports\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <Button \n                    onClick={handleGenerateUsersReport} \n                    className=\"w-full justify-start\"\n                    variant=\"outline\"\n                  >\n                    <Users className=\"h-4 w-4 mr-2\" />\n                    Users Report\n                  </Button>\n                  \n                  <Button \n                    onClick={handleGenerateFarmersReport} \n                    className=\"w-full justify-start\"\n                    variant=\"outline\"\n                  >\n                    <Sprout className=\"h-4 w-4 mr-2\" />\n                    Farmers Report\n                  </Button>\n                  \n                  <Button \n                    onClick={handleGenerateOrdersReport} \n                    className=\"w-full justify-start\"\n                    variant=\"outline\"\n                  >\n                    <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                    Orders Report\n                  </Button>\n                  \n                  <Button \n                    onClick={handleGenerateProductsReport} \n                    className=\"w-full justify-start\"\n                    variant=\"outline\"\n                  >\n                    <Package className=\"h-4 w-4 mr-2\" />\n                    Products Report\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <BarChart3 className=\"h-5 w-5 mr-2\" />\n                    Quick Stats\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                        <p className=\"text-2xl font-bold text-blue-600\">\n                          {users?.filter((u: any) => u.userType === 'customer')?.length || 0}\n                        </p>\n                        <p className=\"text-sm text-blue-800\">Customers</p>\n                      </div>\n                      <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                        <p className=\"text-2xl font-bold text-green-600\">\n                          {farmers?.filter((f: any) => f.isActive)?.length || 0}\n                        </p>\n                        <p className=\"text-sm text-green-800\">Active Farmers</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center p-3 bg-yellow-50 rounded-lg\">\n                        <p className=\"text-2xl font-bold text-yellow-600\">\n                          {orders?.filter((o: any) => o.status === 'pending')?.length || 0}\n                        </p>\n                        <p className=\"text-sm text-yellow-800\">Pending</p>\n                      </div>\n                      <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\n                        <p className=\"text-2xl font-bold text-purple-600\">\n                          {products?.length || 0}\n                        </p>\n                        <p className=\"text-sm text-purple-800\">Products</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Overview Statistics Cards */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Farmers</p>\n                <p className=\"text-3xl font-bold text-rwanda-green\">\n                  {stats?.totalFarmers?.toLocaleString() || '0'}\n                </p>\n                <p className=\"text-xs text-green-600 mt-1\">Active accounts</p>\n              </div>\n              <Sprout className=\"h-10 w-10 text-rwanda-green\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Customers</p>\n                <p className=\"text-3xl font-bold text-rwanda-teal\">\n                  {stats?.totalCustomers?.toLocaleString() || '0'}\n                </p>\n                <p className=\"text-xs text-teal-600 mt-1\">Registered users</p>\n              </div>\n              <Users className=\"h-10 w-10 text-rwanda-teal\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Orders</p>\n                <p className=\"text-3xl font-bold text-blue-600\">\n                  {stats?.totalOrders?.toLocaleString() || '0'}\n                </p>\n                <p className=\"text-xs text-blue-600 mt-1\">All time</p>\n              </div>\n              <ShoppingCart className=\"h-10 w-10 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Revenue</p>\n                <p className=\"text-3xl font-bold text-purple-600\">\n                  {stats?.totalRevenue ? parseFloat(stats.totalRevenue).toLocaleString() : '0'} RWF\n                </p>\n                <p className=\"text-xs text-purple-600 mt-1\">Platform total</p>\n              </div>\n              <TrendingUp className=\"h-10 w-10 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* ML/AI Performance */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Brain className=\"mr-2 h-5 w-5\" />\n                  AI/ML Model Performance\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-3 gap-6\">\n                  <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                    <Target className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                    <h4 className=\"font-semibold text-gray-900\">Prediction Accuracy</h4>\n                    <p className=\"text-2xl font-bold text-green-600\">\n                      {stats?.mlModelAccuracy || '94.2'}%\n                    </p>\n                    <p className=\"text-sm text-gray-600\">Demand forecasting</p>\n                  </div>\n\n                  <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                    <TrendingUp className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\n                    <h4 className=\"font-semibold text-gray-900\">Recommendation CTR</h4>\n                    <p className=\"text-2xl font-bold text-blue-600\">\n                      {stats?.recommendationCTR || '87.5'}%\n                    </p>\n                    <p className=\"text-sm text-gray-600\">User engagement</p>\n                  </div>\n\n                  <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                    <Brain className=\"h-8 w-8 text-purple-600 mx-auto mb-2\" />\n                    <h4 className=\"font-semibold text-gray-900\">Model Confidence</h4>\n                    <p className=\"text-2xl font-bold text-purple-600\">\n                      {stats?.modelConfidence || '91.8'}%\n                    </p>\n                    <p className=\"text-sm text-gray-600\">Overall reliability</p>\n                  </div>\n                </div>\n\n                <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">ML Algorithms in Use</h4>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <strong>TF-IDF Vectorization:</strong>\n                      <p className=\"text-gray-600\">Product similarity analysis</p>\n                    </div>\n                    <div>\n                      <strong>Cosine Similarity:</strong>\n                      <p className=\"text-gray-600\">Farmer recommendations</p>\n                    </div>\n                    <div>\n                      <strong>Scikit-learn Models:</strong>\n                      <p className=\"text-gray-600\">Demand prediction</p>\n                    </div>\n                    <div>\n                      <strong>Geospatial Analysis:</strong>\n                      <p className=\"text-gray-600\">Location-based matching</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Top Provinces */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <MapPin className=\"mr-2 h-5 w-5\" />\n                  Top Provinces\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {stats?.topProvinces?.map((province: any, index: number) => (\n                    <div key={province.name} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium text-gray-900\">{province.name}</h4>\n                        <p className=\"text-sm text-gray-600\">\n                          {province.farmers} farmers • {province.orders} orders\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <span className=\"text-2xl font-bold text-rwanda-green\">#{index + 1}</span>\n                      </div>\n                    </div>\n                  )) || (\n                    // Default data when stats not available\n                    <>\n                      <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">Kigali City</h4>\n                          <p className=\"text-sm text-gray-600\">423 farmers • 298 orders</p>\n                        </div>\n                        <span className=\"text-2xl font-bold text-rwanda-green\">#1</span>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">Southern Province</h4>\n                          <p className=\"text-sm text-gray-600\">312 farmers • 234 orders</p>\n                        </div>\n                        <span className=\"text-2xl font-bold text-rwanda-green\">#2</span>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">Northern Province</h4>\n                          <p className=\"text-sm text-gray-600\">267 farmers • 189 orders</p>\n                        </div>\n                        <span className=\"text-2xl font-bold text-rwanda-green\">#3</span>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"mr-2 h-5 w-5\" />\n                  Recent Activity\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {stats?.recentActivity?.map((activity: any, index: number) => (\n                    <div key={index} className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg\">\n                      <div className={`w-2 h-2 rounded-full mt-2 ${\n                        activity.type === 'order' ? 'bg-blue-500' :\n                        activity.type === 'farmer' ? 'bg-green-500' :\n                        'bg-purple-500'\n                      }`} />\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-gray-900\">{activity.description}</p>\n                        <p className=\"text-xs text-gray-500\">\n                          {new Date(activity.timestamp).toLocaleTimeString()}\n                        </p>\n                      </div>\n                    </div>\n                  )) || (\n                    // Default activities when stats not available\n                    <>\n                      <div className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"w-2 h-2 rounded-full mt-2 bg-blue-500\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm text-gray-900\">New order from Marie in Gasabo</p>\n                          <p className=\"text-xs text-gray-500\">2 minutes ago</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"w-2 h-2 rounded-full mt-2 bg-green-500\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm text-gray-900\">Jean Baptiste updated prices</p>\n                          <p className=\"text-xs text-gray-500\">15 minutes ago</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"w-2 h-2 rounded-full mt-2 bg-purple-500\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm text-gray-900\">AI predicted high egg demand</p>\n                          <p className=\"text-xs text-gray-500\">1 hour ago</p>\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Business Metrics */}\n        <div className=\"mt-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Business Impact Metrics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-4 gap-6\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold text-gray-900\">Average Order Value</h4>\n                  <p className=\"text-2xl font-bold text-rwanda-green\">\n                    {stats?.avgOrderValue ? parseFloat(stats.avgOrderValue).toLocaleString() : '28,500'} RWF\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Per transaction</p>\n                </div>\n\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold text-gray-900\">Farmer Success Rate</h4>\n                  <p className=\"text-2xl font-bold text-green-600\">96.3%</p>\n                  <p className=\"text-sm text-gray-600\">Sales completion</p>\n                </div>\n\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold text-gray-900\">Customer Retention</h4>\n                  <p className=\"text-2xl font-bold text-blue-600\">84.7%</p>\n                  <p className=\"text-sm text-gray-600\">Monthly return rate</p>\n                </div>\n\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold text-gray-900\">AI Adoption</h4>\n                  <p className=\"text-2xl font-bold text-purple-600\">78.2%</p>\n                  <p className=\"text-sm text-gray-600\">Users using AI features</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":39210},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Shield, LogIn, AlertCircle } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nconst adminLoginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype AdminLoginFormData = z.infer<typeof adminLoginSchema>;\n\nexport default function AdminLogin() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<AdminLoginFormData>({\n    resolver: zodResolver(adminLoginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: AdminLoginFormData) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ ...data, userType: \"admin\" }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Admin Access Granted\",\n          description: \"Welcome to AgriConnect Rwanda Admin Panel\",\n        });\n        window.location.reload();\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Access Denied\",\n          description: error.message || \"Invalid admin credentials\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Connection Error\",\n        description: \"Unable to connect to server\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-100 to-slate-200 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"bg-slate-800 p-3 rounded-full\">\n              <Shield className=\"h-8 w-8 text-white\" />\n            </div>\n          </div>\n          <h2 className=\"text-3xl font-extrabold text-gray-900\">\n            Administrator Portal\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            AgriConnect Rwanda - Admin Access\n          </p>\n        </div>\n\n        <Card className=\"shadow-xl border-slate-200\">\n          <CardHeader className=\"bg-slate-50 rounded-t-lg\">\n            <CardTitle className=\"text-center text-xl flex items-center justify-center\">\n              <Shield className=\"h-5 w-5 mr-2\" />\n              Secure Admin Login\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <Alert className=\"mb-6 border-amber-200 bg-amber-50\">\n              <AlertCircle className=\"h-4 w-4 text-amber-600\" />\n              <AlertDescription className=\"text-amber-800\">\n                <strong>Admin Access Only:</strong> This portal is restricted to authorized administrators only. \n                Email/password authentication is required.\n              </AlertDescription>\n            </Alert>\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-slate-700 font-medium\">\n                        Administrator Email\n                      </FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"admin@agriconnect.rw\" \n                          type=\"email\"\n                          className=\"border-slate-300 focus:border-slate-500\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-slate-700 font-medium\">\n                        Password\n                      </FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\" \n                          placeholder=\"••••••••••••\" \n                          className=\"border-slate-300 focus:border-slate-500\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-slate-800 hover:bg-slate-900 text-white\"\n                  disabled={isLoading}\n                  size=\"lg\"\n                >\n                  <LogIn className=\"mr-2 h-4 w-4\" />\n                  {isLoading ? \"Authenticating...\" : \"Sign In as Administrator\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 space-y-4\">\n              <div className=\"text-center text-sm\">\n                <Link \n                  href=\"/customer/login\" \n                  className=\"text-rwanda-green hover:text-emerald-700 font-medium\"\n                >\n                  ← Customer Login\n                </Link>\n              </div>\n\n              {/* Demo Admin Credentials */}\n              <div className=\"bg-slate-50 p-4 rounded-lg border border-slate-200\">\n                <h4 className=\"font-medium text-slate-900 mb-2 flex items-center\">\n                  <Shield className=\"h-4 w-4 mr-1\" />\n                  Demo Admin Account:\n                </h4>\n                <div className=\"text-sm text-slate-700 space-y-1\">\n                  <p><strong>Email:</strong> admin@demo.com</p>\n                  <p><strong>Password:</strong> admin123</p>\n                </div>\n              </div>\n\n              <div className=\"text-xs text-slate-500 text-center\">\n                Admin sessions are automatically logged and monitored for security.\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6876},"client/src/pages/customer-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport Header from \"@/components/header\";\nimport { \n  ShoppingCart, \n  Heart, \n  Star, \n  MapPin, \n  Phone, \n  Package,\n  TrendingUp,\n  Clock,\n  CheckCircle,\n  XCircle,\n  Truck\n} from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function CustomerDashboard() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  // Fetch user's orders\n  const { data: orders, isLoading: loadingOrders } = useQuery({\n    queryKey: [\"/api/orders\"],\n    enabled: isAuthenticated && user?.userType === 'customer',\n  });\n\n  // Fetch recommendations\n  const { data: recommendations, isLoading: loadingRecommendations } = useQuery({\n    queryKey: [\"/api/ml/recommendations\"],\n    enabled: isAuthenticated && user?.userType === 'customer',\n  });\n\n  // Fetch available products\n  const { data: products, isLoading: loadingProducts } = useQuery({\n    queryKey: [\"/api/products\"],\n    enabled: isAuthenticated,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Session Expired\",\n        description: \"Please sign in to access your dashboard\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/customer/login\";\n      }, 500);\n      return;\n    }\n\n    if (!isLoading && isAuthenticated && user?.userType !== 'customer') {\n      toast({\n        title: \"Access Denied\",\n        description: \"Customer access required for this page.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      case 'confirmed':\n        return <CheckCircle className=\"h-4 w-4 text-blue-500\" />;\n      case 'delivered':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'cancelled':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <Package className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'confirmed':\n        return 'bg-blue-100 text-blue-800';\n      case 'delivered':\n        return 'bg-green-100 text-green-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <ShoppingCart className=\"h-12 w-12 text-rwanda-green mx-auto mb-4 animate-pulse\" />\n          <p className=\"text-gray-600\">Loading your dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || user?.userType !== 'customer') {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 py-16\">\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <ShoppingCart className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n                Customer Access Required\n              </h2>\n              <p className=\"text-gray-600 mb-6\">\n                You need to be signed in as a customer to access this dashboard.\n              </p>\n              <Button onClick={() => window.location.href = \"/customer/login\"}>\n                Sign In as Customer\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Welcome Section */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Muraho, {user?.firstName}! 👋\n          </h1>\n          <p className=\"text-gray-600\">\n            Welcome to your AgriConnect Rwanda customer dashboard\n          </p>\n        </div>\n\n        {/* Dashboard Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <ShoppingCart className=\"h-8 w-8 text-rwanda-green\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Orders</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {orders?.length || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Truck className=\"h-8 w-8 text-blue-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Active Orders</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {orders?.filter((o: any) => ['pending', 'confirmed'].includes(o.status))?.length || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Completed</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {orders?.filter((o: any) => o.status === 'delivered')?.length || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <TrendingUp className=\"h-8 w-8 text-purple-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Recommendations</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {recommendations?.length || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"orders\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"orders\">My Orders</TabsTrigger>\n            <TabsTrigger value=\"recommendations\">Recommendations</TabsTrigger>\n            <TabsTrigger value=\"browse\">Browse Products</TabsTrigger>\n          </TabsList>\n\n          {/* Orders Tab */}\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <ShoppingCart className=\"h-5 w-5 mr-2\" />\n                  My Orders\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {loadingOrders ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"animate-pulse bg-gray-200 h-20 rounded-lg\" />\n                    ))}\n                  </div>\n                ) : orders?.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {orders.map((order: any) => (\n                      <div key={order.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900\">\n                              Order #{order.id.slice(-8)}\n                            </h3>\n                            <p className=\"text-sm text-gray-600\">\n                              Farmer: {order.farmer?.user?.firstName} {order.farmer?.user?.lastName}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge className={getStatusColor(order.status)}>\n                              {getStatusIcon(order.status)}\n                              <span className=\"ml-1 capitalize\">{order.status}</span>\n                            </Badge>\n                            <p className=\"text-lg font-bold text-gray-900 mt-1\">\n                              {Number(order.totalAmount).toLocaleString()} RWF\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center text-sm text-gray-600 space-x-4\">\n                          <span className=\"flex items-center\">\n                            <Clock className=\"h-4 w-4 mr-1\" />\n                            {new Date(order.createdAt).toLocaleDateString()}\n                          </span>\n                          {order.deliveryAddress && (\n                            <span className=\"flex items-center\">\n                              <MapPin className=\"h-4 w-4 mr-1\" />\n                              {order.deliveryAddress.slice(0, 30)}...\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <ShoppingCart className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No orders yet</h3>\n                    <p className=\"text-gray-600 mb-4\">Start exploring products to place your first order</p>\n                    <Button onClick={() => window.location.href = \"/\"}>\n                      Browse Products\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Recommendations Tab */}\n          <TabsContent value=\"recommendations\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"h-5 w-5 mr-2\" />\n                  Recommended for You\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {loadingRecommendations ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"animate-pulse bg-gray-200 h-48 rounded-lg\" />\n                    ))}\n                  </div>\n                ) : recommendations?.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {recommendations.map((rec: any) => (\n                      <Card key={rec.id} className=\"hover:shadow-lg transition-shadow\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"aspect-square bg-gray-100 rounded-lg mb-4\">\n                            {rec.product?.imageUrl ? (\n                              <img \n                                src={rec.product.imageUrl} \n                                alt={rec.product.name}\n                                className=\"w-full h-full object-cover rounded-lg\"\n                              />\n                            ) : (\n                              <div className=\"w-full h-full flex items-center justify-center\">\n                                <Package className=\"h-12 w-12 text-gray-400\" />\n                              </div>\n                            )}\n                          </div>\n                          <h3 className=\"font-semibold text-gray-900 mb-2\">\n                            {rec.product?.name}\n                          </h3>\n                          <p className=\"text-sm text-gray-600 mb-2\">\n                            {rec.product?.farmer?.farmName}\n                          </p>\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-lg font-bold text-rwanda-green\">\n                              {Number(rec.product?.pricePerUnit).toLocaleString()} RWF\n                            </span>\n                            <Badge variant=\"secondary\">\n                              {Math.round(Number(rec.similarityScore) * 100)}% match\n                            </Badge>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <TrendingUp className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No recommendations yet</h3>\n                    <p className=\"text-gray-600\">Browse products to get personalized recommendations</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Browse Products Tab */}\n          <TabsContent value=\"browse\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Package className=\"h-5 w-5 mr-2\" />\n                  Available Products\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {loadingProducts ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {[1, 2, 3, 4, 5, 6].map((i) => (\n                      <div key={i} className=\"animate-pulse bg-gray-200 h-48 rounded-lg\" />\n                    ))}\n                  </div>\n                ) : products?.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {products.map((product: any) => (\n                      <Card key={product.id} className=\"hover:shadow-lg transition-shadow\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"aspect-square bg-gray-100 rounded-lg mb-4\">\n                            {product.imageUrl ? (\n                              <img \n                                src={product.imageUrl} \n                                alt={product.name}\n                                className=\"w-full h-full object-cover rounded-lg\"\n                              />\n                            ) : (\n                              <div className=\"w-full h-full flex items-center justify-center\">\n                                <Package className=\"h-12 w-12 text-gray-400\" />\n                              </div>\n                            )}\n                          </div>\n                          <h3 className=\"font-semibold text-gray-900 mb-2\">\n                            {product.name}\n                          </h3>\n                          <p className=\"text-sm text-gray-600 mb-2\">\n                            by {product.farmer?.user?.firstName} {product.farmer?.user?.lastName}\n                          </p>\n                          <div className=\"flex justify-between items-center mb-3\">\n                            <span className=\"text-lg font-bold text-rwanda-green\">\n                              {Number(product.pricePerUnit).toLocaleString()} RWF\n                            </span>\n                            <span className=\"text-sm text-gray-600\">\n                              per {product.unit}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between items-center text-sm text-gray-600\">\n                            <span>Available: {product.availableQuantity}</span>\n                            <span className=\"flex items-center\">\n                              <Star className=\"h-4 w-4 text-yellow-400 mr-1\" />\n                              {Number(product.farmer?.rating).toFixed(1)}\n                            </span>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No products available</h3>\n                    <p className=\"text-gray-600\">Check back later for new products</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":17577},"client/src/pages/customer-login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\nimport { LogIn, Mail, UserPlus, Sprout } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst signupSchema = z.object({\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\ntype SignupFormData = z.infer<typeof signupSchema>;\n\nexport default function CustomerLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"signin\");\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const signupForm = useForm<SignupFormData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onLogin = async (data: LoginFormData) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ ...data, userType: \"customer\" }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Welcome!\",\n          description: \"Successfully signed in to AgriConnect Rwanda\",\n        });\n        window.location.reload();\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Sign In Failed\",\n          description: error.message || \"Invalid credentials\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Connection Error\",\n        description: \"Unable to connect to server\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onSignup = async (data: SignupFormData) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/signup\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          firstName: data.firstName,\n          lastName: data.lastName,\n          email: data.email,\n          password: data.password,\n          userType: \"customer\",\n        }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Account Created!\",\n          description: \"Please sign in with your new account\",\n        });\n        setActiveTab(\"signin\");\n        signupForm.reset();\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Registration Failed\",\n          description: error.message || \"Failed to create account\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Connection Error\",\n        description: \"Unable to connect to server\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleGoogleAuth = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"bg-rwanda-green p-3 rounded-full\">\n              <Sprout className=\"h-8 w-8 text-white\" />\n            </div>\n          </div>\n          <h2 className=\"text-3xl font-extrabold text-gray-900\">\n            AgriConnect Rwanda\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            Customer Portal - Umukiriya\n          </p>\n        </div>\n\n        <Card className=\"shadow-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-center text-xl\">Customer Access</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"signin\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"signup\">Sign Up</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"signin\" className=\"space-y-6\">\n                {/* Google OAuth Button */}\n                <Button\n                  onClick={handleGoogleAuth}\n                  variant=\"outline\"\n                  className=\"w-full border-2 hover:bg-blue-50\"\n                  size=\"lg\"\n                >\n                  <Mail className=\"mr-2 h-4 w-4\" />\n                  Continue with Google\n                </Button>\n\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 flex items-center\">\n                    <span className=\"w-full border-t\" />\n                  </div>\n                  <div className=\"relative flex justify-center text-xs uppercase\">\n                    <span className=\"bg-white px-2 text-muted-foreground\">\n                      Or sign in with email\n                    </span>\n                  </div>\n                </div>\n\n                {/* Email Sign In Form */}\n                <Form {...loginForm}>\n                  <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                    <FormField\n                      control={loginForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"customer@example.com\" \n                              type=\"email\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={loginForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-rwanda-green hover:bg-emerald-700\"\n                      disabled={isLoading}\n                      size=\"lg\"\n                    >\n                      <LogIn className=\"mr-2 h-4 w-4\" />\n                      {isLoading ? \"Signing in...\" : \"Sign In\"}\n                    </Button>\n                  </form>\n                </Form>\n              </TabsContent>\n\n              <TabsContent value=\"signup\" className=\"space-y-6\">\n                {/* Google OAuth Button for Signup */}\n                <Button\n                  onClick={handleGoogleAuth}\n                  variant=\"outline\"\n                  className=\"w-full border-2 hover:bg-blue-50\"\n                  size=\"lg\"\n                >\n                  <Mail className=\"mr-2 h-4 w-4\" />\n                  Sign Up with Google\n                </Button>\n\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 flex items-center\">\n                    <span className=\"w-full border-t\" />\n                  </div>\n                  <div className=\"relative flex justify-center text-xs uppercase\">\n                    <span className=\"bg-white px-2 text-muted-foreground\">\n                      Or create account with email\n                    </span>\n                  </div>\n                </div>\n\n                {/* Email Sign Up Form */}\n                <Form {...signupForm}>\n                  <form onSubmit={signupForm.handleSubmit(onSignup)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={signupForm.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>First Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Jean\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={signupForm.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Last Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Baptiste\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={signupForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"customer@example.com\" \n                              type=\"email\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={signupForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={signupForm.control}\n                      name=\"confirmPassword\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Confirm Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-rwanda-green hover:bg-emerald-700\"\n                      disabled={isLoading}\n                      size=\"lg\"\n                    >\n                      <UserPlus className=\"mr-2 h-4 w-4\" />\n                      {isLoading ? \"Creating account...\" : \"Create Account\"}\n                    </Button>\n                  </form>\n                </Form>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"mt-6 text-center text-sm\">\n              <Link href=\"/admin/login\" className=\"text-rwanda-green hover:text-emerald-700 font-medium\">\n                Admin Login →\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13129},"client/src/pages/farmer-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport Header from \"@/components/header\";\nimport { Sprout, Plus, Package, TrendingUp, Users, Star } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nconst productSchema = z.object({\n  name: z.string().min(1, \"Product name is required\"),\n  nameKinyarwanda: z.string().optional(),\n  description: z.string().optional(),\n  categoryId: z.string().min(1, \"Category is required\"),\n  unit: z.string().min(1, \"Unit is required\"),\n  pricePerUnit: z.string().min(1, \"Price is required\"),\n  availableQuantity: z.number().min(0),\n  minOrderQuantity: z.number().min(1),\n});\n\ntype ProductFormData = z.infer<typeof productSchema>;\n\nexport default function FarmerDashboard() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [isProductDialogOpen, setIsProductDialogOpen] = useState(false);\n\n  const { data: farmer, isLoading: loadingFarmer } = useQuery({\n    queryKey: [\"/api/farmers/me\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: products, isLoading: loadingProducts } = useQuery({\n    queryKey: [\"/api/products/farmer\", farmer?.id],\n    enabled: !!farmer?.id,\n  });\n\n  const { data: orders, isLoading: loadingOrders } = useQuery({\n    queryKey: [\"/api/orders/farmer\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: categories } = useQuery({\n    queryKey: [\"/api/products/categories\"],\n  });\n\n  const { data: demandPredictions } = useQuery({\n    queryKey: [\"/api/ml/demand-predictions\"],\n    enabled: isAuthenticated,\n  });\n\n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(productSchema),\n    defaultValues: {\n      name: \"\",\n      nameKinyarwanda: \"\",\n      description: \"\",\n      categoryId: \"\",\n      unit: \"kg\",\n      pricePerUnit: \"\",\n      availableQuantity: 0,\n      minOrderQuantity: 1,\n    },\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (data: ProductFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/products\", {\n        ...data,\n        pricePerUnit: parseFloat(data.pricePerUnit),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Product created successfully!\",\n      });\n      setIsProductDialogOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/products/farmer\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create product. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || loadingFarmer) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Sprout className=\"h-12 w-12 text-rwanda-green mx-auto mb-4 animate-spin\" />\n          <p className=\"text-gray-600\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!farmer) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 py-16\">\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Sprout className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n                Create Your Farmer Profile\n              </h2>\n              <p className=\"text-gray-600 mb-8\">\n                Set up your farm profile to start selling your products on AgriConnect Rwanda\n              </p>\n              <Button className=\"bg-rwanda-green hover:bg-emerald-700\">\n                Create Profile\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const onSubmit = (data: ProductFormData) => {\n    createProductMutation.mutate(data);\n  };\n\n  const totalRevenue = orders?.reduce((sum: number, order: any) => sum + parseFloat(order.totalAmount), 0) || 0;\n  const pendingOrders = orders?.filter((order: any) => order.status === 'pending').length || 0;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      {/* Dashboard Header */}\n      <section className=\"py-8 bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">\n                Dashboard y'umuhinzi\n              </h1>\n              <p className=\"text-gray-600 mt-1\">\n                Murakaza neza, {user?.firstName}! Igenzura ibicuruzwa byawe n'amategeko\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"flex items-center\">\n                <Star className=\"h-5 w-5 text-yellow-400 mr-1\" />\n                <span className=\"font-semibold\">{farmer.rating || \"0.0\"}</span>\n                <span className=\"text-gray-500 ml-1\">({farmer.totalRatings || 0} reviews)</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Stats Cards */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Revenue</p>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    {totalRevenue.toLocaleString()} RWF\n                  </p>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Products</p>\n                  <p className=\"text-2xl font-bold text-blue-600\">\n                    {products?.length || 0}\n                  </p>\n                </div>\n                <Package className=\"h-8 w-8 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Pending Orders</p>\n                  <p className=\"text-2xl font-bold text-orange-600\">{pendingOrders}</p>\n                </div>\n                <Users className=\"h-8 w-8 text-orange-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Rating</p>\n                  <p className=\"text-2xl font-bold text-yellow-600\">\n                    {farmer.rating || \"0.0\"}\n                  </p>\n                </div>\n                <Star className=\"h-8 w-8 text-yellow-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Products Section */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Ibicuruzwa byawe</CardTitle>\n                  <Dialog open={isProductDialogOpen} onOpenChange={setIsProductDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button className=\"bg-rwanda-green hover:bg-emerald-700\">\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Ongeraho Icyurutwa\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-md\">\n                      <DialogHeader>\n                        <DialogTitle>Ongeraho Icyurutwa Gishya</DialogTitle>\n                      </DialogHeader>\n                      <Form {...form}>\n                        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"name\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Product Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., Fresh Chicken\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"nameKinyarwanda\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Izina mu Kinyarwanda</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., Inkoko Nshya\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"categoryId\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Category</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select category\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {categories?.map((cat: any) => (\n                                      <SelectItem key={cat.id} value={cat.id}>\n                                        {cat.name}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <FormField\n                              control={form.control}\n                              name=\"unit\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Unit</FormLabel>\n                                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                    <FormControl>\n                                      <SelectTrigger>\n                                        <SelectValue />\n                                      </SelectTrigger>\n                                    </FormControl>\n                                    <SelectContent>\n                                      <SelectItem value=\"kg\">kg</SelectItem>\n                                      <SelectItem value=\"piece\">piece</SelectItem>\n                                      <SelectItem value=\"tray\">tray (30 eggs)</SelectItem>\n                                      <SelectItem value=\"bag\">bag</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <FormField\n                              control={form.control}\n                              name=\"pricePerUnit\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Price (RWF)</FormLabel>\n                                  <FormControl>\n                                    <Input type=\"number\" placeholder=\"4500\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n\n                          <FormField\n                            control={form.control}\n                            name=\"description\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Description</FormLabel>\n                                <FormControl>\n                                  <Textarea placeholder=\"Describe your product...\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <FormField\n                              control={form.control}\n                              name=\"availableQuantity\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Available Quantity</FormLabel>\n                                  <FormControl>\n                                    <Input \n                                      type=\"number\" \n                                      {...field} \n                                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <FormField\n                              control={form.control}\n                              name=\"minOrderQuantity\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Min Order Qty</FormLabel>\n                                  <FormControl>\n                                    <Input \n                                      type=\"number\" \n                                      {...field} \n                                      onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n\n                          <div className=\"flex space-x-4\">\n                            <Button type=\"submit\" className=\"flex-1 bg-rwanda-green hover:bg-emerald-700\">\n                              {createProductMutation.isPending ? \"Creating...\" : \"Create Product\"}\n                            </Button>\n                            <Button \n                              type=\"button\" \n                              variant=\"outline\" \n                              onClick={() => setIsProductDialogOpen(false)}\n                            >\n                              Cancel\n                            </Button>\n                          </div>\n                        </form>\n                      </Form>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {loadingProducts ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"animate-pulse p-4 border rounded-lg\">\n                        <div className=\"h-4 bg-gray-200 rounded mb-2\" />\n                        <div className=\"h-3 bg-gray-200 rounded w-2/3\" />\n                      </div>\n                    ))}\n                  </div>\n                ) : products && products.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {products.map((product: any) => (\n                      <div key={product.id} className=\"p-4 border rounded-lg hover:shadow-md transition-shadow\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-semibold text-gray-900\">{product.name}</h4>\n                            {product.nameKinyarwanda && (\n                              <p className=\"text-sm text-gray-600\">{product.nameKinyarwanda}</p>\n                            )}\n                            <p className=\"text-sm text-gray-500\">\n                              {product.availableQuantity} {product.unit} available\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-lg font-bold text-rwanda-green\">\n                              {parseFloat(product.pricePerUnit).toLocaleString()} RWF\n                            </p>\n                            <p className=\"text-sm text-gray-500\">per {product.unit}</p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600\">Ntabicuruzwa byawe. Tangira wongeraho icyurutwa cyawe cya mbere!</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* AI Insights Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Demand Predictions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">AI Demand Predictions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {demandPredictions && demandPredictions.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {demandPredictions.slice(0, 3).map((prediction: any) => (\n                      <div key={prediction.id} className=\"p-3 bg-green-50 rounded-lg\">\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <span className=\"font-medium text-gray-900\">\n                            Expected Demand\n                          </span>\n                          <span className=\"text-sm text-green-600\">\n                            {Math.round(parseFloat(prediction.confidenceScore) * 100)}% confidence\n                          </span>\n                        </div>\n                        <p className=\"text-2xl font-bold text-green-600\">\n                          {parseFloat(prediction.predictedDemand).toLocaleString()} RWF\n                        </p>\n                        <p className=\"text-sm text-gray-600\">Next 7 days</p>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-gray-600 text-sm\">\n                    AI predictions will appear here once you have more data.\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Recent Orders */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Recent Orders</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {loadingOrders ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"animate-pulse p-3 border rounded\">\n                        <div className=\"h-3 bg-gray-200 rounded mb-1\" />\n                        <div className=\"h-3 bg-gray-200 rounded w-2/3\" />\n                      </div>\n                    ))}\n                  </div>\n                ) : orders && orders.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {orders.slice(0, 5).map((order: any) => (\n                      <div key={order.id} className=\"p-3 border rounded-lg\">\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <p className=\"font-medium text-gray-900\">\n                              {order.customer.firstName} {order.customer.lastName}\n                            </p>\n                            <p className=\"text-sm text-gray-600\">\n                              {parseFloat(order.totalAmount).toLocaleString()} RWF\n                            </p>\n                          </div>\n                          <span className={`text-xs px-2 py-1 rounded ${\n                            order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :\n                            order.status === 'confirmed' ? 'bg-blue-100 text-blue-800' :\n                            order.status === 'delivered' ? 'bg-green-100 text-green-800' :\n                            'bg-red-100 text-red-800'\n                          }`}>\n                            {order.status}\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-gray-600 text-sm\">\n                    No orders yet. Orders will appear here when customers place them.\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23955},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport Header from \"@/components/header\";\nimport LocationSearch from \"@/components/location-search\";\nimport FarmerCard from \"@/components/farmer-card\";\nimport { Sprout, MapPin, ShoppingCart, TrendingUp } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  const { data: recommendations, isLoading: loadingRecommendations } = useQuery({\n    queryKey: [\"/api/ml/recommendations\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: nearbyFarmers, isLoading: loadingFarmers } = useQuery({\n    queryKey: [\"/api/farmers/search\"],\n    enabled: isAuthenticated,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Sprout className=\"h-12 w-12 text-rwanda-green mx-auto mb-4 animate-spin\" />\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      {/* Welcome Section */}\n      <section className=\"py-12 bg-gradient-to-r from-rwanda-green to-rwanda-teal\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-3xl md:text-4xl font-bold mb-4\">\n              Murakaza neza, {user?.firstName || 'User'}!\n            </h1>\n            <p className=\"text-xl text-emerald-100 mb-8\">\n              Shakisha abahinzi bakwiye kandi ugure ibicuruzwa byiza ku biciro byiza\n            </p>\n            \n            <div className=\"grid md:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n              <Card className=\"bg-white/10 border-white/20 text-white\">\n                <CardContent className=\"p-6 text-center\">\n                  <MapPin className=\"h-8 w-8 mx-auto mb-2\" />\n                  <h3 className=\"font-semibold mb-1\">Shakisha Abahinzi</h3>\n                  <p className=\"text-sm text-emerald-100\">Bari hafi yawe</p>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-white/10 border-white/20 text-white\">\n                <CardContent className=\"p-6 text-center\">\n                  <TrendingUp className=\"h-8 w-8 mx-auto mb-2\" />\n                  <h3 className=\"font-semibold mb-1\">Gupima Ibiciro</h3>\n                  <p className=\"text-sm text-emerald-100\">Gukoresha AI</p>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-white/10 border-white/20 text-white\">\n                <CardContent className=\"p-6 text-center\">\n                  <ShoppingCart className=\"h-8 w-8 mx-auto mb-2\" />\n                  <h3 className=\"font-semibold mb-1\">Gura vuba</h3>\n                  <p className=\"text-sm text-emerald-100\">Byashyizweho nyuma</p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Search Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Shakisha Abahinzi bari hafi yawe\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Gukoresha AI kugira ngo ubone abahinzi bakwiye\n            </p>\n          </div>\n          <LocationSearch />\n        </div>\n      </section>\n\n      {/* AI Recommendations */}\n      {recommendations && recommendations.length > 0 && (\n        <section className=\"py-16 bg-gray-50\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n                Ibitekerezo bya AI kuri wewe\n              </h2>\n              <p className=\"text-xl text-gray-600\">\n                Hateguwe ku gukoresha amakuru yawe kandi uko ukora\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {recommendations.slice(0, 3).map((rec: any) => (\n                <Card key={rec.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"font-semibold text-gray-900\">{rec.product.name}</h3>\n                      <span className=\"text-sm bg-green-100 text-green-800 px-2 py-1 rounded\">\n                        {Math.round(parseFloat(rec.similarityScore) * 100)}% match\n                      </span>\n                    </div>\n                    <p className=\"text-gray-600 mb-4\">{rec.product.farmer.user.firstName} - {rec.product.farmer.farmName}</p>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-2xl font-bold text-rwanda-green\">\n                        {parseFloat(rec.product.pricePerUnit).toLocaleString()} RWF\n                      </span>\n                      <Button size=\"sm\" className=\"bg-rwanda-green hover:bg-emerald-700\">\n                        Reba\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Nearby Farmers */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-12\">\n            <div>\n              <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n                Abahinzi bari hafi yawe\n              </h2>\n              <p className=\"text-xl text-gray-600\">\n                Shakisha ibicuruzwa byiza biri hafi yawe\n              </p>\n            </div>\n          </div>\n\n          {loadingFarmers ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[1, 2, 3].map((i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <div className=\"h-48 bg-gray-200\" />\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\" />\n                    <div className=\"h-4 bg-gray-200 rounded w-2/3 mb-4\" />\n                    <div className=\"space-y-2\">\n                      <div className=\"h-3 bg-gray-200 rounded\" />\n                      <div className=\"h-3 bg-gray-200 rounded\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : nearbyFarmers && nearbyFarmers.length > 0 ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {nearbyFarmers.slice(0, 6).map((farmer: any) => (\n                <FarmerCard key={farmer.id} farmer={farmer} />\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <MapPin className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                  Nta bahinzi babonetse\n                </h3>\n                <p className=\"text-gray-600 mb-6\">\n                  Gerageza gushakisha mu ntara cyangwa akarere katandukanye\n                </p>\n                <Button className=\"bg-rwanda-green hover:bg-emerald-700\">\n                  Shakisha\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </section>\n\n      {/* Quick Actions */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Ibyiza bishobora\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Koresha ibiranguzo vuba kugira ngo ugere ku kintu ushaka\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-rwanda-green rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Sprout className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Inkoko</h3>\n                <p className=\"text-gray-600 text-sm\">Shakisha inkoko nziza</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-rwanda-teal rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <ShoppingCart className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Amagi</h3>\n                <p className=\"text-gray-600 text-sm\">Amagi mashya buri munsi</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-rwanda-amber rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <TrendingUp className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Ifumbire</h3>\n                <p className=\"text-gray-600 text-sm\">Ifumbire y'ibinyabuzima</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-purple-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <MapPin className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Hafi yawe</h3>\n                <p className=\"text-gray-600 text-sm\">Abahinzi b'aha karyonje</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":11153},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Header from \"@/components/header\";\nimport LocationSearch from \"@/components/location-search\";\nimport FarmerCard from \"@/components/farmer-card\";\nimport PriceComparison from \"@/components/price-comparison\";\nimport { ChevronDown, Sprout, Brain, TrendingUp, Gem } from \"lucide-react\";\n\nexport default function Landing() {\n  const sampleFarmers = [\n    {\n      id: \"farm1\",\n      name: \"Jean Baptiste\",\n      location: \"Gasabo, Kigali • 2.3km imbere\",\n      rating: 4.8,\n      products: [\n        { name: \"Inkoko (kg)\", price: 4500 },\n        { name: \"Amagi (30)\", price: 3000 }\n      ],\n      image: \"https://images.unsplash.com/photo-1548550023-2bdb3c5beed7?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n    },\n    {\n      id: \"farm2\",\n      name: \"Marie Claire\",\n      location: \"Kicukiro, Kigali • 3.7km imbere\",\n      rating: 4.6,\n      products: [\n        { name: \"Inkoko (kg)\", price: 4200 },\n        { name: \"Amagi (30)\", price: 2800 }\n      ],\n      image: \"https://images.unsplash.com/photo-1586953208448-b95a79798f07?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n    },\n    {\n      id: \"farm3\",\n      name: \"Emmanuel\",\n      location: \"Nyarugenge, Kigali • 1.8km imbere\",\n      rating: 5.0,\n      products: [\n        { name: \"Inkoko (kg)\", price: 4800 },\n        { name: \"Amagi (30)\", price: 3200 }\n      ],\n      image: \"https://images.unsplash.com/photo-1516467508483-a7212febe31a?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"relative h-screen\">\n        <div \n          className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n          style={{\n            backgroundImage: \"url('https://images.unsplash.com/photo-1612892483236-52d32a0e0ac1?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080')\"\n          }}\n        />\n        <div className=\"absolute inset-0 bg-black bg-opacity-40\" />\n        \n        <div className=\"relative z-10 flex items-center justify-center h-full\">\n          <div className=\"text-center max-w-4xl mx-auto px-4\">\n            <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6\">\n              Guhuza Abahinzi n'Abakiriya mu Rwanda\n            </h1>\n            <p className=\"text-xl md:text-2xl text-gray-200 mb-8 max-w-3xl mx-auto\">\n              Ikoresha ubuhanga bwa AI kugira ngo ubone abahinzi bari hafi yawe, ugenzure ibiciro, kandi ugure ibicuruzwa byiza cyane\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\" \n                className=\"bg-rwanda-green text-white px-8 py-4 text-lg hover:bg-emerald-700\"\n                onClick={() => window.location.href = '/api/login'}\n              >\n                <Sprout className=\"mr-2 h-5 w-5\" />\n                Shakisha Abahinzi\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                className=\"bg-white text-rwanda-green px-8 py-4 text-lg border-2 border-white hover:bg-gray-100\"\n                onClick={() => window.location.href = '/api/login'}\n              >\n                Andikisha nk'Umuhinzi\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 text-white animate-bounce\">\n          <ChevronDown className=\"h-8 w-8\" />\n        </div>\n      </section>\n\n      {/* Location Search Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Shakisha Abahinzi bari hafi yawe\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Gukoresha AI kugira ngo ubone abahinzi bari hafi yawe mu ntara, akarere, n'umurenge\n            </p>\n          </div>\n          <LocationSearch />\n        </div>\n      </section>\n\n      {/* AI Features Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Ubuhanga bwa AI bukoresha\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Dukoresha tekinorogi ya AI kugira ngo tugufashe guhitamo neza no gusura isoko\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"hover:shadow-xl transition-shadow\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-rwanda-green rounded-xl flex items-center justify-center mb-6\">\n                  <Brain className=\"text-white h-8 w-8\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Ibitekerezo by'ubwenge</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  AI igufasha guhitamo abahinzi bakwiye kandi ibicuruzwa byiza byane bitewe ku biciro n'ubunyangamugayo\n                </p>\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <p className=\"text-sm text-gray-700 font-medium\">AI Model: TF-IDF + Cosine Similarity</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">Gupima ibicuruzwa bifitanye isano</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-xl transition-shadow\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-rwanda-teal rounded-xl flex items-center justify-center mb-6\">\n                  <TrendingUp className=\"text-white h-8 w-8\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Gupima Ibiciro</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  Reba ibiciro by'abahinzi batandukanye kandi umenye uko wahitamo neza mu gihe runaka\n                </p>\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <p className=\"text-sm text-gray-700 font-medium\">Machine Learning Analysis</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">Gutekereza ku biciro mu gihe kizaza</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-xl transition-shadow\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-rwanda-amber rounded-xl flex items-center justify-center mb-6\">\n                  <Gem className=\"text-white h-8 w-8\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Gutekereza ku byifuzwa</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  Tekinorogi ya ML ifasha abahinzi gutekereza ku byifuzwa by'isoko n'ibihe bifata\n                </p>\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <p className=\"text-sm text-gray-700 font-medium\">Scikit-learn Models</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">Amakuru y'ibihe n'isoko</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Farmers Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-12\">\n            <div>\n              <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n                Abahinzi b'ibanze mu Rwanda\n              </h2>\n              <p className=\"text-xl text-gray-600\">\n                Shakisha abahinzi bakora neza bari hafi yawe\n              </p>\n            </div>\n            <Button \n              className=\"bg-rwanda-green text-white hover:bg-emerald-700\"\n              onClick={() => window.location.href = '/api/login'}\n            >\n              Reba byose\n            </Button>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {sampleFarmers.map((farmer) => (\n              <FarmerCard key={farmer.id} farmer={farmer} />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Price Comparison Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n                Gupima Ibiciro Ahantu Hatandukanye\n              </h2>\n              <p className=\"text-xl text-gray-600\">\n                AI igufasha gusanga ibiciro byiza cyane mu Rwanda yose\n              </p>\n            </div>\n            <PriceComparison />\n          </div>\n        </div>\n      </section>\n\n      {/* Dashboard Preview Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Igenzura ry'isoko n'amakuru\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Abahinzi n'abayobozi bongeye gukoresha amakuru ya AI kugira ngo bafashe ibyemezo byiza\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            <Card className=\"bg-gray-50\">\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-xl font-bold text-gray-900 mb-6\">Dashboard y'umuhinzi</h3>\n                \n                <div className=\"space-y-6\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <h4 className=\"font-semibold text-gray-900\">Ibyifuzwa vya Leo</h4>\n                        <span className=\"text-sm text-green-600 bg-green-100 px-2 py-1 rounded\">+12%</span>\n                      </div>\n                      <div className=\"text-3xl font-bold text-rwanda-green mb-2\">45,000 RWF</div>\n                      <p className=\"text-sm text-gray-600\">Urupapuro rw'ibyifuzwa bya AI</p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <h4 className=\"font-semibold text-gray-900 mb-4\">Imiterere y'Ibiciro</h4>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-gray-700\">Inkoko (kg)</span>\n                          <span className=\"font-semibold\">4,500 RWF</span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-gray-700\">Amagi (30)</span>\n                          <span className=\"font-semibold\">3,000 RWF</span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-gray-700\">Ifumbire (kg)</span>\n                          <span className=\"font-semibold\">800 RWF</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gray-50\">\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-xl font-bold text-gray-900 mb-6\">Dashboard y'umuyobozi</h3>\n                \n                <div className=\"space-y-6\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <h4 className=\"font-semibold text-gray-900 mb-4\">Amakuru y'isoko</h4>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-rwanda-green\">1,247</div>\n                          <p className=\"text-sm text-gray-600\">Abahinzi</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-rwanda-teal\">5,691</div>\n                          <p className=\"text-sm text-gray-600\">Abakiriya</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <h4 className=\"font-semibold text-gray-900 mb-4\">ML Model Performance</h4>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-gray-700\">Prediction Accuracy</span>\n                          <span className=\"font-semibold text-green-600\">94.2%</span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-gray-700\">Recommendation CTR</span>\n                          <span className=\"font-semibold text-blue-600\">87.5%</span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-gray-700\">Model Confidence</span>\n                          <span className=\"font-semibold text-purple-600\">91.8%</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Call to Action Section */}\n      <section className=\"py-16 bg-rwanda-green\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">\n            Tangira ubu - Injira mu mugambi w'AgriConnect\n          </h2>\n          <p className=\"text-xl text-emerald-100 mb-8 max-w-3xl mx-auto\">\n            Guhuza abahinzi n'abakiriya muri Rwanda hagamijwe kongera umusaruro, kugabanya ibiciro, no kongera ubunyangamugayo\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-6 justify-center max-w-md mx-auto\">\n            <Button \n              size=\"lg\"\n              className=\"bg-white text-rwanda-green px-8 py-4 font-semibold hover:bg-gray-100\"\n              onClick={() => window.location.href = '/api/login'}\n            >\n              <Sprout className=\"mr-2 h-5 w-5\" />\n              Ndi Umuhinzi\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              className=\"border-2 border-white text-white px-8 py-4 font-semibold hover:bg-emerald-700\"\n              onClick={() => window.location.href = '/api/login'}\n            >\n              Ndi Umukiriya\n            </Button>\n          </div>\n          \n          <div className=\"mt-8 text-emerald-100\">\n            <p className=\"text-sm\">\n              Koresha Google OAuth 2.0 kugira ngo winjire vuba kandi byizewe\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Sprout className=\"text-rwanda-green h-6 w-6\" />\n                <span className=\"text-xl font-bold\">AgriConnect Rwanda</span>\n              </div>\n              <p className=\"text-gray-400 mb-4\">\n                Guhuza abahinzi n'abakiriya mu Rwanda ukoresheje ubuhanga bwa AI\n              </p>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold mb-4\">Amahuza</h3>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white\">Abahinzi</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Ibicuruzwa</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Isoko</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Ubuyobozi</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold mb-4\">Ubufasha</h3>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white\">Uko bikora</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Ubufasha</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Kwandikisha</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Gufunga</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold mb-4\">Ubuhanga</h3>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li className=\"text-sm\">ReactJS + TypeScript</li>\n                <li className=\"text-sm\">Node.js + Express</li>\n                <li className=\"text-sm\">Machine Learning (Scikit-learn)</li>\n                <li className=\"text-sm\">Google Maps API</li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400\">\n            <p>&copy; 2024 AgriConnect Rwanda. Uburenganzira byose birahagaritswe. Ikigo cy'ubuhanga n'ubushakashatsi ku buhinzi.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":18057},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\nimport { LogIn, Mail } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  userType: z.enum([\"customer\", \"farmer\", \"admin\"]),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      userType: \"customer\",\n    },\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Login successful!\",\n        });\n        setLocation(\"/\");\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Error\",\n          description: error.message || \"Login failed\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\", \n        description: \"Network error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleGoogleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <h2 className=\"mt-6 text-3xl font-extrabold text-gray-900\">\n            Injira - Sign In\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            Injira muri AgriConnect Rwanda\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center\">Choose Login Method</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Google Login */}\n            <Button\n              onClick={handleGoogleLogin}\n              variant=\"outline\"\n              className=\"w-full\"\n              size=\"lg\"\n            >\n              <Mail className=\"mr-2 h-4 w-4\" />\n              Continue with Google\n            </Button>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-white px-2 text-muted-foreground\">\n                  Or continue with email\n                </span>\n              </div>\n            </div>\n\n            {/* Email Login Form */}\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"example@email.com\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"userType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Account Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select account type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"customer\">Customer - Umukiriya</SelectItem>\n                          <SelectItem value=\"farmer\">Farmer - Umuhinzi</SelectItem>\n                          <SelectItem value=\"admin\">Admin - Umuyobozi</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-rwanda-green hover:bg-emerald-700\"\n                  disabled={isLoading}\n                  size=\"lg\"\n                >\n                  <LogIn className=\"mr-2 h-4 w-4\" />\n                  {isLoading ? \"Signing in...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"text-center text-sm\">\n              <span className=\"text-gray-600\">Don't have an account? </span>\n              <Link href=\"/signup\" className=\"text-rwanda-green hover:text-emerald-700 font-medium\">\n                Sign up here\n              </Link>\n            </div>\n\n            {/* Demo Credentials */}\n            <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n              <h4 className=\"font-medium text-blue-900 mb-2\">Demo Credentials:</h4>\n              <div className=\"text-sm text-blue-800 space-y-1\">\n                <p><strong>Customer:</strong> customer@demo.com / password123</p>\n                <p><strong>Farmer:</strong> farmer@demo.com / password123</p>\n                <p><strong>Admin:</strong> admin@demo.com / password123</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7076},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/order-details.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useParams } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Header from \"@/components/header\";\nimport { Package, MapPin, Phone, User, Calendar, CreditCard } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function OrderDetails() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { orderId } = useParams<{ orderId: string }>();\n\n  const { data: order, isLoading: loadingOrder } = useQuery({\n    queryKey: [\"/api/orders\", orderId],\n    enabled: isAuthenticated && !!orderId,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'confirmed':\n        return 'bg-blue-100 text-blue-800';\n      case 'delivered':\n        return 'bg-green-100 text-green-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'Gutegereza';\n      case 'confirmed':\n        return 'Byemejwe';\n      case 'delivered':\n        return 'Byatanzwe';\n      case 'cancelled':\n        return 'Byahagaritswe';\n      default:\n        return status;\n    }\n  };\n\n  if (isLoading || loadingOrder) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <Package className=\"h-12 w-12 text-rwanda-green mx-auto mb-4 animate-spin\" />\n            <p className=\"text-gray-600\">Loading order details...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!order) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center\">\n            <Package className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n              Order not found\n            </h3>\n            <p className=\"text-gray-600\">\n              The order you're looking for doesn't exist or you don't have permission to view it.\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Order Header */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <CardTitle className=\"text-2xl\">Order #{order.id}</CardTitle>\n                <p className=\"text-gray-600 mt-1\">\n                  <Calendar className=\"inline h-4 w-4 mr-1\" />\n                  {new Date(order.createdAt).toLocaleDateString('en-RW')}\n                </p>\n              </div>\n              <Badge className={getStatusColor(order.status)}>\n                {getStatusText(order.status)}\n              </Badge>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Farmer Information</h4>\n                <div className=\"space-y-2\">\n                  <p className=\"flex items-center text-gray-600\">\n                    <User className=\"h-4 w-4 mr-2\" />\n                    {order.farmer?.user?.firstName} {order.farmer?.user?.lastName}\n                  </p>\n                  {order.farmer?.farmName && (\n                    <p className=\"text-gray-600\">{order.farmer.farmName}</p>\n                  )}\n                  {order.farmer?.phone && (\n                    <p className=\"flex items-center text-gray-600\">\n                      <Phone className=\"h-4 w-4 mr-2\" />\n                      {order.farmer.phone}\n                    </p>\n                  )}\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Delivery Information</h4>\n                <div className=\"space-y-2\">\n                  {order.deliveryAddress && (\n                    <p className=\"flex items-center text-gray-600\">\n                      <MapPin className=\"h-4 w-4 mr-2\" />\n                      {order.deliveryAddress}\n                    </p>\n                  )}\n                  {order.deliveryPhone && (\n                    <p className=\"flex items-center text-gray-600\">\n                      <Phone className=\"h-4 w-4 mr-2\" />\n                      {order.deliveryPhone}\n                    </p>\n                  )}\n                  {order.notes && (\n                    <p className=\"text-gray-600\">\n                      <strong>Notes:</strong> {order.notes}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Order Items */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Order Items</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {order.items && order.items.length > 0 ? (\n              <div className=\"space-y-4\">\n                {order.items.map((item: any) => (\n                  <div key={item.id} className=\"flex justify-between items-center border-b pb-4\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold\">{item.product?.name}</h4>\n                      <p className=\"text-gray-600\">\n                        {item.quantity} {item.product?.unit} × {parseFloat(item.unitPrice).toLocaleString()} RWF\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold text-rwanda-green\">\n                        {parseFloat(item.totalPrice).toLocaleString()} RWF\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-gray-600\">No items found for this order.</p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Order Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Order Summary</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex justify-between items-center border-t pt-4\">\n              <span className=\"text-xl font-semibold\">Total Amount:</span>\n              <span className=\"text-2xl font-bold text-rwanda-green flex items-center\">\n                <CreditCard className=\"h-5 w-5 mr-2\" />\n                {parseFloat(order.totalAmount).toLocaleString()} RWF\n              </span>\n            </div>\n            \n            <div className=\"mt-6 flex gap-4\">\n              {order.status === 'pending' && (\n                <Button variant=\"destructive\">\n                  Cancel Order\n                </Button>\n              )}\n              <Button variant=\"outline\" className=\"flex-1\">\n                Contact Farmer\n              </Button>\n              <Button className=\"bg-rwanda-green hover:bg-emerald-700\">\n                Reorder Items\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8112},"client/src/pages/product-comparison.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useParams } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport Header from \"@/components/header\";\nimport { \n  TrendingUp, \n  MapPin, \n  Star, \n  Lightbulb, \n  ArrowUpDown,\n  Filter\n} from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function ProductComparison() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { categoryId } = useParams<{ categoryId: string }>();\n  const [selectedProvince, setSelectedProvince] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"price\");\n\n  const { data: provinces } = useQuery({\n    queryKey: [\"/api/locations/provinces\"],\n  });\n\n  const { data: categories } = useQuery({\n    queryKey: [\"/api/products/categories\"],\n  });\n\n  const { data: comparisonData, isLoading: loadingComparison } = useQuery({\n    queryKey: [\"/api/products/price-comparison\", categoryId, selectedProvince],\n    enabled: !!categoryId,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const getCategoryName = (id: string) => {\n    const category = categories?.find((cat: any) => cat.id === id);\n    return category?.nameKinyarwanda || category?.name || 'Product';\n  };\n\n  const getBadgeColor = (recommendation: string) => {\n    switch (recommendation) {\n      case 'best_value':\n        return 'bg-green-50 border-green-200 text-green-800';\n      case 'good_deal':\n        return 'bg-blue-50 border-blue-200 text-blue-800';\n      case 'premium':\n        return 'bg-red-50 border-red-200 text-red-800';\n      default:\n        return 'bg-gray-50 border-gray-200 text-gray-800';\n    }\n  };\n\n  const getIndicatorColor = (recommendation: string) => {\n    switch (recommendation) {\n      case 'best_value':\n        return 'bg-green-500';\n      case 'good_deal':\n        return 'bg-blue-500';\n      case 'premium':\n        return 'bg-red-500';\n      default:\n        return 'bg-gray-400';\n    }\n  };\n\n  const getVarianceColor = (variance: number) => {\n    if (variance < 0) return 'text-green-600';\n    if (variance > 5) return 'text-red-600';\n    return 'text-gray-500';\n  };\n\n  const sortedProducts = comparisonData?.products ? [...comparisonData.products].sort((a: any, b: any) => {\n    switch (sortBy) {\n      case 'price':\n        return parseFloat(a.product.pricePerUnit) - parseFloat(b.product.pricePerUnit);\n      case 'rating':\n        return parseFloat(b.farmer.rating || '0') - parseFloat(a.farmer.rating || '0');\n      case 'distance':\n        return (a.distance || 0) - (b.distance || 0);\n      default:\n        return 0;\n    }\n  }) : [];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <TrendingUp className=\"h-12 w-12 text-rwanda-green mx-auto mb-4 animate-spin\" />\n          <p className=\"text-gray-600\">Loading comparison...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      {/* Header Section */}\n      <section className=\"py-8 bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Gupima Ibiciro - {getCategoryName(categoryId || '')}\n            </h1>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              AI-powered price comparison ikoresha TF-IDF vectorization na cosine similarity\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Filters */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"grid md:grid-cols-4 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  <Filter className=\"inline h-4 w-4 mr-1\" />\n                  Intara\n                </label>\n                <Select onValueChange={setSelectedProvince} value={selectedProvince}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Byose\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Byose</SelectItem>\n                    {provinces?.map((province: any) => (\n                      <SelectItem key={province.id} value={province.id}>\n                        {province.nameKinyarwanda || province.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  <ArrowUpDown className=\"inline h-4 w-4 mr-1\" />\n                  Gutondeka\n                </label>\n                <Select onValueChange={setSortBy} value={sortBy}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"price\">Igiciro</SelectItem>\n                    <SelectItem value=\"rating\">Amanota</SelectItem>\n                    <SelectItem value=\"distance\">Intera</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"md:col-span-2 flex items-end\">\n                {comparisonData?.analysis && (\n                  <div className=\"bg-rwanda-green/10 p-4 rounded-lg w-full\">\n                    <p className=\"text-sm text-rwanda-green font-medium\">\n                      AI Analysis: {comparisonData.analysis.totalOptions} options found\n                    </p>\n                    <p className=\"text-xs text-gray-600\">\n                      Average price: {comparisonData.analysis.averagePrice} RWF\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Comparison Results */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"mr-2 h-5 w-5\" />\n                  Ibyuya by'igupima (AI Analysis)\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {loadingComparison ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3, 4].map((i) => (\n                      <div key={i} className=\"animate-pulse p-4 border rounded-lg\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-3 h-3 bg-gray-200 rounded-full\" />\n                          <div className=\"flex-1\">\n                            <div className=\"h-4 bg-gray-200 rounded mb-2\" />\n                            <div className=\"h-3 bg-gray-200 rounded w-2/3\" />\n                          </div>\n                          <div className=\"w-20 h-6 bg-gray-200 rounded\" />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : sortedProducts.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {sortedProducts.map((item: any, index: number) => (\n                      <div \n                        key={item.product.id} \n                        className={`border rounded-lg p-4 hover:shadow-md transition-shadow ${getBadgeColor(item.recommendation)}`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className={`w-4 h-4 rounded-full ${getIndicatorColor(item.recommendation)}`} />\n                            <div>\n                              <h4 className=\"font-semibold text-gray-900\">\n                                {item.farmer.user.firstName} {item.farmer.user.lastName}\n                              </h4>\n                              <p className=\"text-sm text-gray-600\">\n                                {item.farmer.farmName || 'Farm'} • \n                                {item.distance && ` ${item.distance.toFixed(1)}km •`}\n                                <span className=\"ml-1 inline-flex items-center\">\n                                  <Star className=\"h-3 w-3 text-yellow-400 mr-1\" />\n                                  {parseFloat(item.farmer.rating || '0').toFixed(1)}\n                                </span>\n                              </p>\n                              <div className=\"flex items-center mt-1\">\n                                <span className=\"text-xs px-2 py-1 rounded-full bg-white\">\n                                  {item.recommendation === 'best_value' && '🏆 Ibiciro byiza cyane'}\n                                  {item.recommendation === 'good_deal' && '💚 Icyemezo cyiza'}\n                                  {item.recommendation === 'premium' && '⭐ Ubunyangamugayo bukomeye'}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-2xl font-bold text-rwanda-green\">\n                              {parseFloat(item.product.pricePerUnit).toLocaleString()} RWF\n                            </p>\n                            <p className={`text-sm ${getVarianceColor(parseFloat(item.priceVariance))}`}>\n                              {parseFloat(item.priceVariance) > 0 ? '+' : ''}{item.priceVariance}%\n                              {parseFloat(item.priceVariance) === 0 ? ' rusange' : \n                               parseFloat(item.priceVariance) < 0 ? ' hasi' : ' hejuru'}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              AI Score: {Math.round(parseFloat(item.similarityScore) * 100)}%\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"mt-4 flex justify-between items-center\">\n                          <div className=\"text-sm text-gray-600\">\n                            <p>{item.product.description}</p>\n                            <p>Available: {item.product.availableQuantity} {item.product.unit}</p>\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            <Button size=\"sm\" variant=\"outline\">\n                              <MapPin className=\"h-4 w-4 mr-1\" />\n                              Location\n                            </Button>\n                            <Button size=\"sm\" className=\"bg-rwanda-green hover:bg-emerald-700\">\n                              Gura\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <TrendingUp className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                      No products found\n                    </h3>\n                    <p className=\"text-gray-600\">\n                      Try adjusting your filters to see more results.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* AI Insights Sidebar */}\n          <div className=\"space-y-6\">\n            {/* AI Recommendations */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-lg\">\n                  <Lightbulb className=\"mr-2 h-5 w-5\" />\n                  AI Insights\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {comparisonData?.analysis ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"p-4 bg-blue-50 rounded-lg\">\n                      <h4 className=\"font-semibold text-blue-900 mb-2\">\n                        Smart Recommendation\n                      </h4>\n                      <p className=\"text-blue-800 text-sm\">\n                        {comparisonData.analysis.aiRecommendation}\n                      </p>\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-600\">Best Value:</span>\n                        <span className=\"font-medium\">{comparisonData.analysis.bestValue}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-600\">Options Found:</span>\n                        <span className=\"font-medium\">{comparisonData.analysis.totalOptions}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-600\">Average Price:</span>\n                        <span className=\"font-medium\">{comparisonData.analysis.averagePrice} RWF</span>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"p-4 bg-gray-50 rounded-lg\">\n                    <p className=\"text-gray-600 text-sm\">\n                      AI analysis will appear here once data is loaded.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* ML Algorithm Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">ML Algorithms Used</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"p-3 bg-green-50 rounded-lg\">\n                    <h4 className=\"font-medium text-green-900\">TF-IDF Vectorization</h4>\n                    <p className=\"text-xs text-green-700\">\n                      Analyzes product descriptions and features for similarity matching\n                    </p>\n                  </div>\n                  \n                  <div className=\"p-3 bg-blue-50 rounded-lg\">\n                    <h4 className=\"font-medium text-blue-900\">Cosine Similarity</h4>\n                    <p className=\"text-xs text-blue-700\">\n                      Calculates similarity scores between products and farmers\n                    </p>\n                  </div>\n                  \n                  <div className=\"p-3 bg-purple-50 rounded-lg\">\n                    <h4 className=\"font-medium text-purple-900\">Location Analysis</h4>\n                    <p className=\"text-xs text-purple-700\">\n                      Factors in distance and regional pricing patterns\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <TrendingUp className=\"h-4 w-4 mr-2\" />\n                    View Price Trends\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <MapPin className=\"h-4 w-4 mr-2\" />\n                    Map View\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Star className=\"h-4 w-4 mr-2\" />\n                    Save Favorites\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16965},"client/src/pages/product-details.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport Header from \"@/components/header\";\nimport { \n  Package, \n  MapPin, \n  Phone, \n  User, \n  Star, \n  ShoppingCart, \n  Plus, \n  Minus,\n  MessageCircle\n} from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function ProductDetails() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const { productId } = useParams<{ productId: string }>();\n  const [quantity, setQuantity] = useState(1);\n  const [deliveryAddress, setDeliveryAddress] = useState(\"\");\n  const [deliveryPhone, setDeliveryPhone] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n\n  const { data: product, isLoading: loadingProduct } = useQuery({\n    queryKey: [\"/api/products\", productId],\n    enabled: !!productId,\n  });\n\n  const orderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/orders\", orderData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Order placed successfully!\",\n      });\n      setQuantity(1);\n      setDeliveryAddress(\"\");\n      setDeliveryPhone(\"\");\n      setNotes(\"\");\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to place order. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const handlePlaceOrder = () => {\n    if (!isAuthenticated) {\n      window.location.href = \"/login\";\n      return;\n    }\n\n    if (!deliveryAddress || !deliveryPhone) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide delivery address and phone number.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const totalAmount = parseFloat(product.pricePerUnit) * quantity;\n    \n    orderMutation.mutate({\n      farmerId: product.farmerId,\n      totalAmount: totalAmount.toString(),\n      deliveryAddress,\n      deliveryPhone,\n      notes,\n      items: [{\n        productId: product.id,\n        quantity,\n        unitPrice: parseFloat(product.pricePerUnit),\n      }]\n    });\n  };\n\n  const adjustQuantity = (change: number) => {\n    const newQuantity = quantity + change;\n    if (newQuantity >= product.minOrderQuantity && newQuantity <= product.availableQuantity) {\n      setQuantity(newQuantity);\n    }\n  };\n\n  if (isLoading || loadingProduct) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <Package className=\"h-12 w-12 text-rwanda-green mx-auto mb-4 animate-spin\" />\n            <p className=\"text-gray-600\">Loading product details...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center\">\n            <Package className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n              Product not found\n            </h3>\n            <p className=\"text-gray-600\">\n              The product you're looking for doesn't exist.\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const totalPrice = parseFloat(product.pricePerUnit) * quantity;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Product Image and Info */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"aspect-square bg-gray-200 rounded-lg mb-6 flex items-center justify-center\">\n                  {product.imageUrl ? (\n                    <img \n                      src={product.imageUrl} \n                      alt={product.name}\n                      className=\"w-full h-full object-cover rounded-lg\"\n                    />\n                  ) : (\n                    <Package className=\"h-24 w-24 text-gray-400\" />\n                  )}\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <h1 className=\"text-3xl font-bold text-gray-900\">\n                      {product.name}\n                    </h1>\n                    {product.nameKinyarwanda && (\n                      <p className=\"text-lg text-gray-600\">\n                        {product.nameKinyarwanda}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center space-x-4\">\n                    <span className=\"text-3xl font-bold text-rwanda-green\">\n                      {parseFloat(product.pricePerUnit).toLocaleString()} RWF\n                    </span>\n                    <span className=\"text-gray-600\">per {product.unit}</span>\n                  </div>\n\n                  <div className=\"flex items-center space-x-4\">\n                    <Badge variant={product.isAvailable ? \"default\" : \"destructive\"}>\n                      {product.isAvailable ? \"Available\" : \"Out of Stock\"}\n                    </Badge>\n                    <span className=\"text-sm text-gray-600\">\n                      {product.availableQuantity} {product.unit} available\n                    </span>\n                  </div>\n\n                  {product.description && (\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">Description</h3>\n                      <p className=\"text-gray-600\">{product.description}</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Farmer Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Farmer Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center\">\n                    <User className=\"h-4 w-4 mr-2 text-gray-400\" />\n                    <span className=\"font-medium\">\n                      {product.farmer?.user?.firstName} {product.farmer?.user?.lastName}\n                    </span>\n                  </div>\n                  \n                  {product.farmer?.farmName && (\n                    <div className=\"flex items-center\">\n                      <Package className=\"h-4 w-4 mr-2 text-gray-400\" />\n                      <span>{product.farmer.farmName}</span>\n                    </div>\n                  )}\n\n                  {product.farmer?.rating && (\n                    <div className=\"flex items-center\">\n                      <Star className=\"h-4 w-4 mr-2 text-yellow-400 fill-current\" />\n                      <span>{parseFloat(product.farmer.rating).toFixed(1)}</span>\n                      <span className=\"text-gray-600 ml-1\">\n                        ({product.farmer.totalRatings} reviews)\n                      </span>\n                    </div>\n                  )}\n\n                  {product.farmer?.phone && (\n                    <div className=\"flex items-center\">\n                      <Phone className=\"h-4 w-4 mr-2 text-gray-400\" />\n                      <span>{product.farmer.phone}</span>\n                    </div>\n                  )}\n\n                  <Button variant=\"outline\" className=\"w-full mt-4\">\n                    <MessageCircle className=\"h-4 w-4 mr-2\" />\n                    Contact Farmer\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Form */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Place Order</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Quantity Selection */}\n                <div>\n                  <Label>Quantity ({product.unit})</Label>\n                  <div className=\"flex items-center space-x-4 mt-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => adjustQuantity(-1)}\n                      disabled={quantity <= product.minOrderQuantity}\n                    >\n                      <Minus className=\"h-4 w-4\" />\n                    </Button>\n                    <span className=\"text-xl font-semibold w-16 text-center\">\n                      {quantity}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => adjustQuantity(1)}\n                      disabled={quantity >= product.availableQuantity}\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    Min order: {product.minOrderQuantity} {product.unit}\n                  </p>\n                </div>\n\n                {/* Delivery Information */}\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"deliveryAddress\">Delivery Address</Label>\n                    <Textarea\n                      id=\"deliveryAddress\"\n                      placeholder=\"Enter your full delivery address\"\n                      value={deliveryAddress}\n                      onChange={(e) => setDeliveryAddress(e.target.value)}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"deliveryPhone\">Phone Number</Label>\n                    <Input\n                      id=\"deliveryPhone\"\n                      placeholder=\"078XXXXXXX\"\n                      value={deliveryPhone}\n                      onChange={(e) => setDeliveryPhone(e.target.value)}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"notes\">Additional Notes (Optional)</Label>\n                    <Textarea\n                      id=\"notes\"\n                      placeholder=\"Any special instructions for delivery\"\n                      value={notes}\n                      onChange={(e) => setNotes(e.target.value)}\n                    />\n                  </div>\n                </div>\n\n                {/* Order Summary */}\n                <div className=\"border-t pt-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span>Unit Price:</span>\n                      <span>{parseFloat(product.pricePerUnit).toLocaleString()} RWF</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Quantity:</span>\n                      <span>{quantity} {product.unit}</span>\n                    </div>\n                    <div className=\"flex justify-between text-lg font-semibold border-t pt-2\">\n                      <span>Total:</span>\n                      <span className=\"text-rwanda-green\">\n                        {totalPrice.toLocaleString()} RWF\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <Button\n                  onClick={handlePlaceOrder}\n                  disabled={!product.isAvailable || orderMutation.isPending}\n                  className=\"w-full bg-rwanda-green hover:bg-emerald-700\"\n                  size=\"lg\"\n                >\n                  <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                  {orderMutation.isPending ? \"Placing Order...\" : \"Place Order\"}\n                </Button>\n\n                {!isAuthenticated && (\n                  <p className=\"text-sm text-gray-600 text-center\">\n                    <a href=\"/login\" className=\"text-rwanda-green hover:underline\">\n                      Sign in\n                    </a> to place an order\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13598},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\nimport { UserPlus, Mail } from \"lucide-react\";\n\nconst signupSchema = z.object({\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n  userType: z.enum([\"customer\", \"farmer\"]),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupFormData = z.infer<typeof signupSchema>;\n\nexport default function Signup() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<SignupFormData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      userType: \"customer\",\n    },\n  });\n\n  const onSubmit = async (data: SignupFormData) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/signup\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          firstName: data.firstName,\n          lastName: data.lastName,\n          email: data.email,\n          password: data.password,\n          userType: data.userType,\n        }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Account created successfully! Please sign in.\",\n        });\n        setLocation(\"/login\");\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Error\",\n          description: error.message || \"Signup failed\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\", \n        description: \"Network error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleGoogleSignup = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <h2 className=\"mt-6 text-3xl font-extrabold text-gray-900\">\n            Iyandikishe - Sign Up\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            Kora konti ya AgriConnect Rwanda\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center\">Create Your Account</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Google Signup */}\n            <Button\n              onClick={handleGoogleSignup}\n              variant=\"outline\"\n              className=\"w-full\"\n              size=\"lg\"\n            >\n              <Mail className=\"mr-2 h-4 w-4\" />\n              Continue with Google\n            </Button>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-white px-2 text-muted-foreground\">\n                  Or create account with email\n                </span>\n              </div>\n            </div>\n\n            {/* Email Signup Form */}\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"John\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Doe\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"example@email.com\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"userType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Account Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select account type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"customer\">Customer - Umukiriya</SelectItem>\n                          <SelectItem value=\"farmer\">Farmer - Umuhinzi</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-rwanda-green hover:bg-emerald-700\"\n                  disabled={isLoading}\n                  size=\"lg\"\n                >\n                  <UserPlus className=\"mr-2 h-4 w-4\" />\n                  {isLoading ? \"Creating account...\" : \"Create Account\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"text-center text-sm\">\n              <span className=\"text-gray-600\">Already have an account? </span>\n              <Link href=\"/login\" className=\"text-rwanda-green hover:text-emerald-700 font-medium\">\n                Sign in here\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8696},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertDescription }","size_bytes":1269},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}